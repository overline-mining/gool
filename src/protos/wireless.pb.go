// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.12.4
// source: wireless.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WirelessBcBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash                       []byte                     `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`                                     // string in BcBlock (32)
	PreviousHash               []byte                     `protobuf:"bytes,2,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"` // string in BcBlock (32)
	Version                    uint64                     `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	SchemaVersion              uint64                     `protobuf:"varint,4,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	Height                     uint64                     `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Miner                      string                     `protobuf:"bytes,6,opt,name=miner,proto3" json:"miner,omitempty"`
	Difficulty                 []byte                     `protobuf:"bytes,7,opt,name=difficulty,proto3" json:"difficulty,omitempty"` // string in BcBlock(7)
	Timestamp                  uint64                     `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MerkleRoot                 []byte                     `protobuf:"bytes,9,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`           // string in BcBlock (32)
	ChainRoot                  []byte                     `protobuf:"bytes,10,opt,name=chain_root,json=chainRoot,proto3" json:"chain_root,omitempty"`             // string in BcBlock (32)
	Distance                   []byte                     `protobuf:"bytes,11,opt,name=distance,proto3" json:"distance,omitempty"`                                // string in BcBlock (7)
	TotalDistance              []byte                     `protobuf:"bytes,12,opt,name=total_distance,json=totalDistance,proto3" json:"total_distance,omitempty"` // string in BcBlock (13)
	Nonce                      string                     `protobuf:"bytes,13,opt,name=nonce,proto3" json:"nonce,omitempty"`                                      // TODO check if bytes
	NrgGrant                   uint64                     `protobuf:"varint,14,opt,name=nrg_grant,json=nrgGrant,proto3" json:"nrg_grant,omitempty"`
	Twn                        uint64                     `protobuf:"varint,15,opt,name=twn,proto3" json:"twn,omitempty"`
	Tws                        []string                   `protobuf:"bytes,16,rep,name=tws,proto3" json:"tws,omitempty"`
	EmblemWeight               uint64                     `protobuf:"varint,17,opt,name=emblem_weight,json=emblemWeight,proto3" json:"emblem_weight,omitempty"`
	EmblemChainFingerprintRoot string                     `protobuf:"bytes,18,opt,name=emblem_chain_fingerprint_root,json=emblemChainFingerprintRoot,proto3" json:"emblem_chain_fingerprint_root,omitempty"`
	EmblemChainAddress         string                     `protobuf:"bytes,19,opt,name=emblem_chain_address,json=emblemChainAddress,proto3" json:"emblem_chain_address,omitempty"`
	TxCount                    uint64                     `protobuf:"varint,20,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Txs                        []*WirelessTransaction     `protobuf:"bytes,21,rep,name=txs,proto3" json:"txs,omitempty"`
	TxFeeBase                  uint64                     `protobuf:"varint,22,opt,name=tx_fee_base,json=txFeeBase,proto3" json:"tx_fee_base,omitempty"`
	TxDistanceSumLimit         uint64                     `protobuf:"varint,23,opt,name=tx_distance_sum_limit,json=txDistanceSumLimit,proto3" json:"tx_distance_sum_limit,omitempty"`
	BlockchainHeadersCount     uint64                     `protobuf:"varint,24,opt,name=blockchain_headers_count,json=blockchainHeadersCount,proto3" json:"blockchain_headers_count,omitempty"`
	BlockchainHeaders          *WirelessBlockchainHeaders `protobuf:"bytes,25,opt,name=blockchain_headers,json=blockchainHeaders,proto3" json:"blockchain_headers,omitempty"`
	BlockchainFingerprintsRoot []byte                     `protobuf:"bytes,26,opt,name=blockchain_fingerprints_root,json=blockchainFingerprintsRoot,proto3" json:"blockchain_fingerprints_root,omitempty"` // string in BcBlock (32)
}

func (x *WirelessBcBlock) Reset() {
	*x = WirelessBcBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wireless_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessBcBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessBcBlock) ProtoMessage() {}

func (x *WirelessBcBlock) ProtoReflect() protoreflect.Message {
	mi := &file_wireless_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessBcBlock.ProtoReflect.Descriptor instead.
func (*WirelessBcBlock) Descriptor() ([]byte, []int) {
	return file_wireless_proto_rawDescGZIP(), []int{0}
}

func (x *WirelessBcBlock) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *WirelessBcBlock) GetPreviousHash() []byte {
	if x != nil {
		return x.PreviousHash
	}
	return nil
}

func (x *WirelessBcBlock) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WirelessBcBlock) GetSchemaVersion() uint64 {
	if x != nil {
		return x.SchemaVersion
	}
	return 0
}

func (x *WirelessBcBlock) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *WirelessBcBlock) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *WirelessBcBlock) GetDifficulty() []byte {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *WirelessBcBlock) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WirelessBcBlock) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *WirelessBcBlock) GetChainRoot() []byte {
	if x != nil {
		return x.ChainRoot
	}
	return nil
}

func (x *WirelessBcBlock) GetDistance() []byte {
	if x != nil {
		return x.Distance
	}
	return nil
}

func (x *WirelessBcBlock) GetTotalDistance() []byte {
	if x != nil {
		return x.TotalDistance
	}
	return nil
}

func (x *WirelessBcBlock) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *WirelessBcBlock) GetNrgGrant() uint64 {
	if x != nil {
		return x.NrgGrant
	}
	return 0
}

func (x *WirelessBcBlock) GetTwn() uint64 {
	if x != nil {
		return x.Twn
	}
	return 0
}

func (x *WirelessBcBlock) GetTws() []string {
	if x != nil {
		return x.Tws
	}
	return nil
}

func (x *WirelessBcBlock) GetEmblemWeight() uint64 {
	if x != nil {
		return x.EmblemWeight
	}
	return 0
}

func (x *WirelessBcBlock) GetEmblemChainFingerprintRoot() string {
	if x != nil {
		return x.EmblemChainFingerprintRoot
	}
	return ""
}

func (x *WirelessBcBlock) GetEmblemChainAddress() string {
	if x != nil {
		return x.EmblemChainAddress
	}
	return ""
}

func (x *WirelessBcBlock) GetTxCount() uint64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *WirelessBcBlock) GetTxs() []*WirelessTransaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *WirelessBcBlock) GetTxFeeBase() uint64 {
	if x != nil {
		return x.TxFeeBase
	}
	return 0
}

func (x *WirelessBcBlock) GetTxDistanceSumLimit() uint64 {
	if x != nil {
		return x.TxDistanceSumLimit
	}
	return 0
}

func (x *WirelessBcBlock) GetBlockchainHeadersCount() uint64 {
	if x != nil {
		return x.BlockchainHeadersCount
	}
	return 0
}

func (x *WirelessBcBlock) GetBlockchainHeaders() *WirelessBlockchainHeaders {
	if x != nil {
		return x.BlockchainHeaders
	}
	return nil
}

func (x *WirelessBcBlock) GetBlockchainFingerprintsRoot() []byte {
	if x != nil {
		return x.BlockchainFingerprintsRoot
	}
	return nil
}

type WirelessBlockchainHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Btc []*WirelessBlockchainHeader `protobuf:"bytes,1,rep,name=btc,proto3" json:"btc,omitempty"`
	Eth []*WirelessBlockchainHeader `protobuf:"bytes,2,rep,name=eth,proto3" json:"eth,omitempty"`
	Lsk []*WirelessBlockchainHeader `protobuf:"bytes,3,rep,name=lsk,proto3" json:"lsk,omitempty"`
	Neo []*WirelessBlockchainHeader `protobuf:"bytes,4,rep,name=neo,proto3" json:"neo,omitempty"`
	Wav []*WirelessBlockchainHeader `protobuf:"bytes,5,rep,name=wav,proto3" json:"wav,omitempty"`
}

func (x *WirelessBlockchainHeaders) Reset() {
	*x = WirelessBlockchainHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wireless_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessBlockchainHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessBlockchainHeaders) ProtoMessage() {}

func (x *WirelessBlockchainHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_wireless_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessBlockchainHeaders.ProtoReflect.Descriptor instead.
func (*WirelessBlockchainHeaders) Descriptor() ([]byte, []int) {
	return file_wireless_proto_rawDescGZIP(), []int{1}
}

func (x *WirelessBlockchainHeaders) GetBtc() []*WirelessBlockchainHeader {
	if x != nil {
		return x.Btc
	}
	return nil
}

func (x *WirelessBlockchainHeaders) GetEth() []*WirelessBlockchainHeader {
	if x != nil {
		return x.Eth
	}
	return nil
}

func (x *WirelessBlockchainHeaders) GetLsk() []*WirelessBlockchainHeader {
	if x != nil {
		return x.Lsk
	}
	return nil
}

func (x *WirelessBlockchainHeaders) GetNeo() []*WirelessBlockchainHeader {
	if x != nil {
		return x.Neo
	}
	return nil
}

func (x *WirelessBlockchainHeaders) GetWav() []*WirelessBlockchainHeader {
	if x != nil {
		return x.Wav
	}
	return nil
}

type WirelessBlockchainHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockchain                           string                       `protobuf:"bytes,1,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	Hash                                 string                       `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousHash                         string                       `protobuf:"bytes,3,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	Timestamp                            uint64                       `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Height                               uint64                       `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	MerkleRoot                           string                       `protobuf:"bytes,6,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	BlockchainConfirmationsInParentCount uint64                       `protobuf:"varint,7,opt,name=blockchain_confirmations_in_parent_count,json=blockchainConfirmationsInParentCount,proto3" json:"blockchain_confirmations_in_parent_count,omitempty"`
	MarkedTxs                            []*WirelessMarkedTransaction `protobuf:"bytes,8,rep,name=marked_txs,json=markedTxs,proto3" json:"marked_txs,omitempty"`
	MarkedTxCount                        uint64                       `protobuf:"varint,9,opt,name=marked_tx_count,json=markedTxCount,proto3" json:"marked_tx_count,omitempty"`
}

func (x *WirelessBlockchainHeader) Reset() {
	*x = WirelessBlockchainHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wireless_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessBlockchainHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessBlockchainHeader) ProtoMessage() {}

func (x *WirelessBlockchainHeader) ProtoReflect() protoreflect.Message {
	mi := &file_wireless_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessBlockchainHeader.ProtoReflect.Descriptor instead.
func (*WirelessBlockchainHeader) Descriptor() ([]byte, []int) {
	return file_wireless_proto_rawDescGZIP(), []int{2}
}

func (x *WirelessBlockchainHeader) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *WirelessBlockchainHeader) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *WirelessBlockchainHeader) GetPreviousHash() string {
	if x != nil {
		return x.PreviousHash
	}
	return ""
}

func (x *WirelessBlockchainHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WirelessBlockchainHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *WirelessBlockchainHeader) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *WirelessBlockchainHeader) GetBlockchainConfirmationsInParentCount() uint64 {
	if x != nil {
		return x.BlockchainConfirmationsInParentCount
	}
	return 0
}

func (x *WirelessBlockchainHeader) GetMarkedTxs() []*WirelessMarkedTransaction {
	if x != nil {
		return x.MarkedTxs
	}
	return nil
}

func (x *WirelessBlockchainHeader) GetMarkedTxCount() uint64 {
	if x != nil {
		return x.MarkedTxCount
	}
	return 0
}

type WirelessMarkedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Hash        string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`                                   // the unique hash representing this transaction in the bridged chain
	Id          string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                       // TODO: add blockchain / dataset identification field, 'eth', 'btc', ....
	Token       string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`                                 // chains smart contract address, not BC
	AddrFrom    string `protobuf:"bytes,5,opt,name=addr_from,json=addrFrom,proto3" json:"addr_from,omitempty"`           // bridged chains address, not BC
	AddrTo      string `protobuf:"bytes,6,opt,name=addr_to,json=addrTo,proto3" json:"addr_to,omitempty"`                 // bridged chains address, not BC
	BlockHeight uint64 `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"` // the block number in the bridged chain containing this transaction
	Index       uint64 `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`                                // the position relative to other marked transactions
	BlockHash   string `protobuf:"bytes,9,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`        // the block in which the marked transaction was stored, not BC, format of the bridged chain
}

func (x *WirelessMarkedTransaction) Reset() {
	*x = WirelessMarkedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wireless_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessMarkedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessMarkedTransaction) ProtoMessage() {}

func (x *WirelessMarkedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_wireless_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessMarkedTransaction.ProtoReflect.Descriptor instead.
func (*WirelessMarkedTransaction) Descriptor() ([]byte, []int) {
	return file_wireless_proto_rawDescGZIP(), []int{3}
}

func (x *WirelessMarkedTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WirelessMarkedTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *WirelessMarkedTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WirelessMarkedTransaction) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *WirelessMarkedTransaction) GetAddrFrom() string {
	if x != nil {
		return x.AddrFrom
	}
	return ""
}

func (x *WirelessMarkedTransaction) GetAddrTo() string {
	if x != nil {
		return x.AddrTo
	}
	return ""
}

func (x *WirelessMarkedTransaction) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *WirelessMarkedTransaction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *WirelessMarkedTransaction) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type WirelessTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   uint64                       `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Nonce     string                       `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"` // <rnd>+<minerAddess> / <tx mine work> TODO check if bytes
	Hash      []byte                       `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`   // string in Transaction (32)
	Overline  string                       `protobuf:"bytes,4,opt,name=overline,proto3" json:"overline,omitempty"`
	NinCount  uint64                       `protobuf:"varint,5,opt,name=nin_count,json=ninCount,proto3" json:"nin_count,omitempty"`
	NoutCount uint64                       `protobuf:"varint,6,opt,name=nout_count,json=noutCount,proto3" json:"nout_count,omitempty"`
	Inputs    []*WirelessTransactionInput  `protobuf:"bytes,7,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs   []*WirelessTransactionOutput `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty"`
	LockTime  uint32                       `protobuf:"varint,9,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
}

func (x *WirelessTransaction) Reset() {
	*x = WirelessTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wireless_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessTransaction) ProtoMessage() {}

func (x *WirelessTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_wireless_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessTransaction.ProtoReflect.Descriptor instead.
func (*WirelessTransaction) Descriptor() ([]byte, []int) {
	return file_wireless_proto_rawDescGZIP(), []int{4}
}

func (x *WirelessTransaction) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WirelessTransaction) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *WirelessTransaction) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *WirelessTransaction) GetOverline() string {
	if x != nil {
		return x.Overline
	}
	return ""
}

func (x *WirelessTransaction) GetNinCount() uint64 {
	if x != nil {
		return x.NinCount
	}
	return 0
}

func (x *WirelessTransaction) GetNoutCount() uint64 {
	if x != nil {
		return x.NoutCount
	}
	return 0
}

func (x *WirelessTransaction) GetInputs() []*WirelessTransactionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *WirelessTransaction) GetOutputs() []*WirelessTransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *WirelessTransaction) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

type WirelessTransactionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPoint     *WirelessOutPoint `protobuf:"bytes,1,opt,name=out_point,json=outPoint,proto3" json:"out_point,omitempty"`
	ScriptLength uint32            `protobuf:"varint,2,opt,name=script_length,json=scriptLength,proto3" json:"script_length,omitempty"`
	InputScript  []byte            `protobuf:"bytes,3,opt,name=input_script,json=inputScript,proto3" json:"input_script,omitempty"`
}

func (x *WirelessTransactionInput) Reset() {
	*x = WirelessTransactionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wireless_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessTransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessTransactionInput) ProtoMessage() {}

func (x *WirelessTransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_wireless_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessTransactionInput.ProtoReflect.Descriptor instead.
func (*WirelessTransactionInput) Descriptor() ([]byte, []int) {
	return file_wireless_proto_rawDescGZIP(), []int{5}
}

func (x *WirelessTransactionInput) GetOutPoint() *WirelessOutPoint {
	if x != nil {
		return x.OutPoint
	}
	return nil
}

func (x *WirelessTransactionInput) GetScriptLength() uint32 {
	if x != nil {
		return x.ScriptLength
	}
	return 0
}

func (x *WirelessTransactionInput) GetInputScript() []byte {
	if x != nil {
		return x.InputScript
	}
	return nil
}

type WirelessOutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"` // string in OutPoint (32)
	Index uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *WirelessOutPoint) Reset() {
	*x = WirelessOutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wireless_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessOutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessOutPoint) ProtoMessage() {}

func (x *WirelessOutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_wireless_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessOutPoint.ProtoReflect.Descriptor instead.
func (*WirelessOutPoint) Descriptor() ([]byte, []int) {
	return file_wireless_proto_rawDescGZIP(), []int{6}
}

func (x *WirelessOutPoint) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WirelessOutPoint) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *WirelessOutPoint) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type WirelessTransactionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit         []byte `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	ScriptLength uint32 `protobuf:"varint,3,opt,name=script_length,json=scriptLength,proto3" json:"script_length,omitempty"`
	OutputScript []byte `protobuf:"bytes,4,opt,name=output_script,json=outputScript,proto3" json:"output_script,omitempty"`
}

func (x *WirelessTransactionOutput) Reset() {
	*x = WirelessTransactionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wireless_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessTransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessTransactionOutput) ProtoMessage() {}

func (x *WirelessTransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_wireless_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessTransactionOutput.ProtoReflect.Descriptor instead.
func (*WirelessTransactionOutput) Descriptor() ([]byte, []int) {
	return file_wireless_proto_rawDescGZIP(), []int{7}
}

func (x *WirelessTransactionOutput) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WirelessTransactionOutput) GetUnit() []byte {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *WirelessTransactionOutput) GetScriptLength() uint32 {
	if x != nil {
		return x.ScriptLength
	}
	return 0
}

func (x *WirelessTransactionOutput) GetOutputScript() []byte {
	if x != nil {
		return x.OutputScript
	}
	return nil
}

var File_wireless_proto protoreflect.FileDescriptor

var file_wireless_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x22, 0xe0, 0x07,
	0x0a, 0x0f, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x63, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x72, 0x67, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x77, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x77, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x77, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x77,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x65,
	0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6d, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x6d, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x78,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x78, 0x46, 0x65, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x78,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x78, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x11, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40,
	0x0a, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74,
	0x22, 0xb8, 0x02, 0x0a, 0x19, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x03, 0x62, 0x74, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x63,
	0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x03, 0x62, 0x74, 0x63, 0x12, 0x37, 0x0a, 0x03, 0x65, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x65, 0x74, 0x68,
	0x12, 0x37, 0x0a, 0x03, 0x6c, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x6c, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x03, 0x6e, 0x65, 0x6f,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x6e,
	0x65, 0x6f, 0x12, 0x37, 0x0a, 0x03, 0x77, 0x61, 0x76, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x77, 0x61, 0x76, 0x22, 0x91, 0x03, 0x0a, 0x18,
	0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x56, 0x0a, 0x28, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x24, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x54, 0x78, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xf9, 0x01, 0x0a, 0x19, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x64,
	0x72, 0x54, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0xcf, 0x02, 0x0a, 0x13,
	0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x40,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x01,
	0x0a, 0x18, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x63, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x52,
	0x0a, 0x10, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wireless_proto_rawDescOnce sync.Once
	file_wireless_proto_rawDescData = file_wireless_proto_rawDesc
)

func file_wireless_proto_rawDescGZIP() []byte {
	file_wireless_proto_rawDescOnce.Do(func() {
		file_wireless_proto_rawDescData = protoimpl.X.CompressGZIP(file_wireless_proto_rawDescData)
	})
	return file_wireless_proto_rawDescData
}

var file_wireless_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_wireless_proto_goTypes = []interface{}{
	(*WirelessBcBlock)(nil),           // 0: bc.wireless.WirelessBcBlock
	(*WirelessBlockchainHeaders)(nil), // 1: bc.wireless.WirelessBlockchainHeaders
	(*WirelessBlockchainHeader)(nil),  // 2: bc.wireless.WirelessBlockchainHeader
	(*WirelessMarkedTransaction)(nil), // 3: bc.wireless.WirelessMarkedTransaction
	(*WirelessTransaction)(nil),       // 4: bc.wireless.WirelessTransaction
	(*WirelessTransactionInput)(nil),  // 5: bc.wireless.WirelessTransactionInput
	(*WirelessOutPoint)(nil),          // 6: bc.wireless.WirelessOutPoint
	(*WirelessTransactionOutput)(nil), // 7: bc.wireless.WirelessTransactionOutput
}
var file_wireless_proto_depIdxs = []int32{
	4,  // 0: bc.wireless.WirelessBcBlock.txs:type_name -> bc.wireless.WirelessTransaction
	1,  // 1: bc.wireless.WirelessBcBlock.blockchain_headers:type_name -> bc.wireless.WirelessBlockchainHeaders
	2,  // 2: bc.wireless.WirelessBlockchainHeaders.btc:type_name -> bc.wireless.WirelessBlockchainHeader
	2,  // 3: bc.wireless.WirelessBlockchainHeaders.eth:type_name -> bc.wireless.WirelessBlockchainHeader
	2,  // 4: bc.wireless.WirelessBlockchainHeaders.lsk:type_name -> bc.wireless.WirelessBlockchainHeader
	2,  // 5: bc.wireless.WirelessBlockchainHeaders.neo:type_name -> bc.wireless.WirelessBlockchainHeader
	2,  // 6: bc.wireless.WirelessBlockchainHeaders.wav:type_name -> bc.wireless.WirelessBlockchainHeader
	3,  // 7: bc.wireless.WirelessBlockchainHeader.marked_txs:type_name -> bc.wireless.WirelessMarkedTransaction
	5,  // 8: bc.wireless.WirelessTransaction.inputs:type_name -> bc.wireless.WirelessTransactionInput
	7,  // 9: bc.wireless.WirelessTransaction.outputs:type_name -> bc.wireless.WirelessTransactionOutput
	6,  // 10: bc.wireless.WirelessTransactionInput.out_point:type_name -> bc.wireless.WirelessOutPoint
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_wireless_proto_init() }
func file_wireless_proto_init() {
	if File_wireless_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wireless_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessBcBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wireless_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessBlockchainHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wireless_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessBlockchainHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wireless_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessMarkedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wireless_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wireless_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessTransactionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wireless_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessOutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wireless_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessTransactionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wireless_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wireless_proto_goTypes,
		DependencyIndexes: file_wireless_proto_depIdxs,
		MessageInfos:      file_wireless_proto_msgTypes,
	}.Build()
	File_wireless_proto = out.File
	file_wireless_proto_rawDesc = nil
	file_wireless_proto_goTypes = nil
	file_wireless_proto_depIdxs = nil
}
