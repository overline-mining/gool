// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: bc.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeedTransactionDataType int32

const (
	FeedTransactionDataType_TYPE1 FeedTransactionDataType = 0 // this is here as a placeholder, can be removed when types are decided
)

// Enum value maps for FeedTransactionDataType.
var (
	FeedTransactionDataType_name = map[int32]string{
		0: "TYPE1",
	}
	FeedTransactionDataType_value = map[string]int32{
		"TYPE1": 0,
	}
)

func (x FeedTransactionDataType) Enum() *FeedTransactionDataType {
	p := new(FeedTransactionDataType)
	*p = x
	return p
}

func (x FeedTransactionDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedTransactionDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_bc_proto_enumTypes[0].Descriptor()
}

func (FeedTransactionDataType) Type() protoreflect.EnumType {
	return &file_bc_proto_enumTypes[0]
}

func (x FeedTransactionDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedTransactionDataType.Descriptor instead.
func (FeedTransactionDataType) EnumDescriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{0}
}

type RpcTransactionResponseStatus int32

const (
	RpcTransactionResponseStatus_Success RpcTransactionResponseStatus = 0
	RpcTransactionResponseStatus_Failure RpcTransactionResponseStatus = 1
)

// Enum value maps for RpcTransactionResponseStatus.
var (
	RpcTransactionResponseStatus_name = map[int32]string{
		0: "Success",
		1: "Failure",
	}
	RpcTransactionResponseStatus_value = map[string]int32{
		"Success": 0,
		"Failure": 1,
	}
)

func (x RpcTransactionResponseStatus) Enum() *RpcTransactionResponseStatus {
	p := new(RpcTransactionResponseStatus)
	*p = x
	return p
}

func (x RpcTransactionResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcTransactionResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bc_proto_enumTypes[1].Descriptor()
}

func (RpcTransactionResponseStatus) Type() protoreflect.EnumType {
	return &file_bc_proto_enumTypes[1]
}

func (x RpcTransactionResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpcTransactionResponseStatus.Descriptor instead.
func (RpcTransactionResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{1}
}

type HelpResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HelpText      string                 `protobuf:"bytes,1,opt,name=help_text,json=helpText,proto3" json:"help_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelpResponse) Reset() {
	*x = HelpResponse{}
	mi := &file_bc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpResponse) ProtoMessage() {}

func (x *HelpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpResponse.ProtoReflect.Descriptor instead.
func (*HelpResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{0}
}

func (x *HelpResponse) GetHelpText() string {
	if x != nil {
		return x.HelpText
	}
	return ""
}

type StatsResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Calls                int64                  `protobuf:"varint,1,opt,name=calls,proto3" json:"calls,omitempty"`
	LatestGpuMinerUpdate uint64                 `protobuf:"varint,2,opt,name=latest_gpu_miner_update,json=latestGpuMinerUpdate,proto3" json:"latest_gpu_miner_update,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	mi := &file_bc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{1}
}

func (x *StatsResponse) GetCalls() int64 {
	if x != nil {
		return x.Calls
	}
	return 0
}

func (x *StatsResponse) GetLatestGpuMinerUpdate() uint64 {
	if x != nil {
		return x.LatestGpuMinerUpdate
	}
	return 0
}

type RpcTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromAddr      string                 `protobuf:"bytes,1,opt,name=from_addr,json=fromAddr,proto3" json:"from_addr,omitempty"`
	ToAddr        string                 `protobuf:"bytes,2,opt,name=to_addr,json=toAddr,proto3" json:"to_addr,omitempty"`
	Amount        string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	TxFee         string                 `protobuf:"bytes,4,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
	PrivateKeyHex string                 `protobuf:"bytes,5,opt,name=private_key_hex,json=privateKeyHex,proto3" json:"private_key_hex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcTransaction) Reset() {
	*x = RpcTransaction{}
	mi := &file_bc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcTransaction) ProtoMessage() {}

func (x *RpcTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcTransaction.ProtoReflect.Descriptor instead.
func (*RpcTransaction) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{2}
}

func (x *RpcTransaction) GetFromAddr() string {
	if x != nil {
		return x.FromAddr
	}
	return ""
}

func (x *RpcTransaction) GetToAddr() string {
	if x != nil {
		return x.ToAddr
	}
	return ""
}

func (x *RpcTransaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RpcTransaction) GetTxFee() string {
	if x != nil {
		return x.TxFee
	}
	return ""
}

func (x *RpcTransaction) GetPrivateKeyHex() string {
	if x != nil {
		return x.PrivateKeyHex
	}
	return ""
}

type RpcFeedTransactionRequest struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	OwnerAddr       string                  `protobuf:"bytes,1,opt,name=owner_addr,json=ownerAddr,proto3" json:"owner_addr,omitempty"`
	FeedAddr        string                  `protobuf:"bytes,2,opt,name=feed_addr,json=feedAddr,proto3" json:"feed_addr,omitempty"`
	DataType        FeedTransactionDataType `protobuf:"varint,3,opt,name=data_type,json=dataType,proto3,enum=bc.exchange.FeedTransactionDataType" json:"data_type,omitempty"`
	DataLength      uint64                  `protobuf:"varint,4,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	Data            string                  `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Amount          string                  `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	TxFee           string                  `protobuf:"bytes,7,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
	TxPart          string                  `protobuf:"bytes,8,opt,name=tx_part,json=txPart,proto3" json:"tx_part,omitempty"`
	TxPanel         string                  `protobuf:"bytes,9,opt,name=tx_panel,json=txPanel,proto3" json:"tx_panel,omitempty"`
	TxNonce         string                  `protobuf:"bytes,10,opt,name=tx_nonce,json=txNonce,proto3" json:"tx_nonce,omitempty"`
	MinimumDistance string                  `protobuf:"bytes,11,opt,name=minimum_distance,json=minimumDistance,proto3" json:"minimum_distance,omitempty"`
	PrivateKeyHex   string                  `protobuf:"bytes,12,opt,name=private_key_hex,json=privateKeyHex,proto3" json:"private_key_hex,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RpcFeedTransactionRequest) Reset() {
	*x = RpcFeedTransactionRequest{}
	mi := &file_bc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcFeedTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcFeedTransactionRequest) ProtoMessage() {}

func (x *RpcFeedTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcFeedTransactionRequest.ProtoReflect.Descriptor instead.
func (*RpcFeedTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{3}
}

func (x *RpcFeedTransactionRequest) GetOwnerAddr() string {
	if x != nil {
		return x.OwnerAddr
	}
	return ""
}

func (x *RpcFeedTransactionRequest) GetFeedAddr() string {
	if x != nil {
		return x.FeedAddr
	}
	return ""
}

func (x *RpcFeedTransactionRequest) GetDataType() FeedTransactionDataType {
	if x != nil {
		return x.DataType
	}
	return FeedTransactionDataType_TYPE1
}

func (x *RpcFeedTransactionRequest) GetDataLength() uint64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *RpcFeedTransactionRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RpcFeedTransactionRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RpcFeedTransactionRequest) GetTxFee() string {
	if x != nil {
		return x.TxFee
	}
	return ""
}

func (x *RpcFeedTransactionRequest) GetTxPart() string {
	if x != nil {
		return x.TxPart
	}
	return ""
}

func (x *RpcFeedTransactionRequest) GetTxPanel() string {
	if x != nil {
		return x.TxPanel
	}
	return ""
}

func (x *RpcFeedTransactionRequest) GetTxNonce() string {
	if x != nil {
		return x.TxNonce
	}
	return ""
}

func (x *RpcFeedTransactionRequest) GetMinimumDistance() string {
	if x != nil {
		return x.MinimumDistance
	}
	return ""
}

func (x *RpcFeedTransactionRequest) GetPrivateKeyHex() string {
	if x != nil {
		return x.PrivateKeyHex
	}
	return ""
}

type RpcUpdateFeedTransactionRequest struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	OwnerAddr       string                  `protobuf:"bytes,1,opt,name=owner_addr,json=ownerAddr,proto3" json:"owner_addr,omitempty"`
	FeedAddr        string                  `protobuf:"bytes,2,opt,name=feed_addr,json=feedAddr,proto3" json:"feed_addr,omitempty"`
	SenderAddr      string                  `protobuf:"bytes,3,opt,name=sender_addr,json=senderAddr,proto3" json:"sender_addr,omitempty"`
	DataType        FeedTransactionDataType `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=bc.exchange.FeedTransactionDataType" json:"data_type,omitempty"`
	DataLength      uint64                  `protobuf:"varint,5,opt,name=data_length,json=dataLength,proto3" json:"data_length,omitempty"`
	Data            string                  `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Amount          string                  `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	TxFee           string                  `protobuf:"bytes,8,opt,name=tx_fee,json=txFee,proto3" json:"tx_fee,omitempty"`
	TxPanel         string                  `protobuf:"bytes,9,opt,name=tx_panel,json=txPanel,proto3" json:"tx_panel,omitempty"`
	TxPart          string                  `protobuf:"bytes,10,opt,name=tx_part,json=txPart,proto3" json:"tx_part,omitempty"`
	TxNonce         string                  `protobuf:"bytes,11,opt,name=tx_nonce,json=txNonce,proto3" json:"tx_nonce,omitempty"`
	MinimumDistance string                  `protobuf:"bytes,12,opt,name=minimum_distance,json=minimumDistance,proto3" json:"minimum_distance,omitempty"`
	PrivateKeyHex   string                  `protobuf:"bytes,13,opt,name=private_key_hex,json=privateKeyHex,proto3" json:"private_key_hex,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RpcUpdateFeedTransactionRequest) Reset() {
	*x = RpcUpdateFeedTransactionRequest{}
	mi := &file_bc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcUpdateFeedTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcUpdateFeedTransactionRequest) ProtoMessage() {}

func (x *RpcUpdateFeedTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcUpdateFeedTransactionRequest.ProtoReflect.Descriptor instead.
func (*RpcUpdateFeedTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{4}
}

func (x *RpcUpdateFeedTransactionRequest) GetOwnerAddr() string {
	if x != nil {
		return x.OwnerAddr
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetFeedAddr() string {
	if x != nil {
		return x.FeedAddr
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetSenderAddr() string {
	if x != nil {
		return x.SenderAddr
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetDataType() FeedTransactionDataType {
	if x != nil {
		return x.DataType
	}
	return FeedTransactionDataType_TYPE1
}

func (x *RpcUpdateFeedTransactionRequest) GetDataLength() uint64 {
	if x != nil {
		return x.DataLength
	}
	return 0
}

func (x *RpcUpdateFeedTransactionRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetTxFee() string {
	if x != nil {
		return x.TxFee
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetTxPanel() string {
	if x != nil {
		return x.TxPanel
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetTxPart() string {
	if x != nil {
		return x.TxPart
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetTxNonce() string {
	if x != nil {
		return x.TxNonce
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetMinimumDistance() string {
	if x != nil {
		return x.MinimumDistance
	}
	return ""
}

func (x *RpcUpdateFeedTransactionRequest) GetPrivateKeyHex() string {
	if x != nil {
		return x.PrivateKeyHex
	}
	return ""
}

type RpcTransactionResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Status        RpcTransactionResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=bc.exchange.RpcTransactionResponseStatus" json:"status,omitempty"`
	TxHash        string                       `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Error         string                       `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcTransactionResponse) Reset() {
	*x = RpcTransactionResponse{}
	mi := &file_bc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcTransactionResponse) ProtoMessage() {}

func (x *RpcTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcTransactionResponse.ProtoReflect.Descriptor instead.
func (*RpcTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{5}
}

func (x *RpcTransactionResponse) GetStatus() RpcTransactionResponseStatus {
	if x != nil {
		return x.Status
	}
	return RpcTransactionResponseStatus_Success
}

func (x *RpcTransactionResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *RpcTransactionResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Transfer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Amount        string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	TxHash        string                 `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxOutputIndex uint32                 `protobuf:"varint,5,opt,name=tx_output_index,json=txOutputIndex,proto3" json:"tx_output_index,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Height        uint64                 `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	mi := &file_bc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{6}
}

func (x *Transfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Transfer) GetTxOutputIndex() uint32 {
	if x != nil {
		return x.TxOutputIndex
	}
	return 0
}

func (x *Transfer) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Transfer) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type TransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Max           uint32                 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	From          string                 `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	mi := &file_bc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{7}
}

func (x *TransferRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TransferRequest) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *TransferRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type GetHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          string                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Max           uint64                 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHistoryRequest) Reset() {
	*x = GetHistoryRequest{}
	mi := &file_bc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryRequest) ProtoMessage() {}

func (x *GetHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetHistoryRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{8}
}

func (x *GetHistoryRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetHistoryRequest) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type TransferResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transfers     []*Transfer            `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
	From          string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	mi := &file_bc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{9}
}

func (x *TransferResponse) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *TransferResponse) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransferResponse) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type GetUtxoLengthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptType    string                 `protobuf:"bytes,1,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUtxoLengthRequest) Reset() {
	*x = GetUtxoLengthRequest{}
	mi := &file_bc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUtxoLengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUtxoLengthRequest) ProtoMessage() {}

func (x *GetUtxoLengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUtxoLengthRequest.ProtoReflect.Descriptor instead.
func (*GetUtxoLengthRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{10}
}

func (x *GetUtxoLengthRequest) GetScriptType() string {
	if x != nil {
		return x.ScriptType
	}
	return ""
}

func (x *GetUtxoLengthRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetUtxosRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScriptType    string                 `protobuf:"bytes,1,opt,name=script_type,json=scriptType,proto3" json:"script_type,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	From          string                 `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUtxosRequest) Reset() {
	*x = GetUtxosRequest{}
	mi := &file_bc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUtxosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUtxosRequest) ProtoMessage() {}

func (x *GetUtxosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUtxosRequest.ProtoReflect.Descriptor instead.
func (*GetUtxosRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{11}
}

func (x *GetUtxosRequest) GetScriptType() string {
	if x != nil {
		return x.ScriptType
	}
	return ""
}

func (x *GetUtxosRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetUtxosRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetUtxosRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type GetUtxoLengthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Length        uint32                 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUtxoLengthResponse) Reset() {
	*x = GetUtxoLengthResponse{}
	mi := &file_bc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUtxoLengthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUtxoLengthResponse) ProtoMessage() {}

func (x *GetUtxoLengthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUtxoLengthResponse.ProtoReflect.Descriptor instead.
func (*GetUtxoLengthResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{12}
}

func (x *GetUtxoLengthResponse) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type GetSpendableCollateralRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	From          uint32                 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To            uint32                 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpendableCollateralRequest) Reset() {
	*x = GetSpendableCollateralRequest{}
	mi := &file_bc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpendableCollateralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpendableCollateralRequest) ProtoMessage() {}

func (x *GetSpendableCollateralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpendableCollateralRequest.ProtoReflect.Descriptor instead.
func (*GetSpendableCollateralRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{13}
}

func (x *GetSpendableCollateralRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetSpendableCollateralRequest) GetFrom() uint32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *GetSpendableCollateralRequest) GetTo() uint32 {
	if x != nil {
		return x.To
	}
	return 0
}

type GetSpendableCollateralResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Outpoints     []*OutPoint            `protobuf:"bytes,1,rep,name=outpoints,proto3" json:"outpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpendableCollateralResponse) Reset() {
	*x = GetSpendableCollateralResponse{}
	mi := &file_bc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpendableCollateralResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpendableCollateralResponse) ProtoMessage() {}

func (x *GetSpendableCollateralResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpendableCollateralResponse.ProtoReflect.Descriptor instead.
func (*GetSpendableCollateralResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{14}
}

func (x *GetSpendableCollateralResponse) GetOutpoints() []*OutPoint {
	if x != nil {
		return x.Outpoints
	}
	return nil
}

type GetBalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	mi := &file_bc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{15}
}

func (x *GetBalanceRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetEmbBalanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       string                 `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEmbBalanceResponse) Reset() {
	*x = GetEmbBalanceResponse{}
	mi := &file_bc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmbBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmbBalanceResponse) ProtoMessage() {}

func (x *GetEmbBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmbBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetEmbBalanceResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{16}
}

func (x *GetEmbBalanceResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type GetByteFeeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fee           string                 `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByteFeeResponse) Reset() {
	*x = GetByteFeeResponse{}
	mi := &file_bc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByteFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByteFeeResponse) ProtoMessage() {}

func (x *GetByteFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByteFeeResponse.ProtoReflect.Descriptor instead.
func (*GetByteFeeResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{17}
}

func (x *GetByteFeeResponse) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type GetBalanceResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Height         uint32                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Confirmed      string                 `protobuf:"bytes,2,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Unconfirmed    string                 `protobuf:"bytes,3,opt,name=unconfirmed,proto3" json:"unconfirmed,omitempty"`
	Collateralized string                 `protobuf:"bytes,4,opt,name=collateralized,proto3" json:"collateralized,omitempty"`
	Unlockable     string                 `protobuf:"bytes,5,opt,name=unlockable,proto3" json:"unlockable,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	mi := &file_bc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{18}
}

func (x *GetBalanceResponse) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBalanceResponse) GetConfirmed() string {
	if x != nil {
		return x.Confirmed
	}
	return ""
}

func (x *GetBalanceResponse) GetUnconfirmed() string {
	if x != nil {
		return x.Unconfirmed
	}
	return ""
}

func (x *GetBalanceResponse) GetCollateralized() string {
	if x != nil {
		return x.Collateralized
	}
	return ""
}

func (x *GetBalanceResponse) GetUnlockable() string {
	if x != nil {
		return x.Unlockable
	}
	return ""
}

type GetUnlockTakerTxParamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxOutputIndex uint32                 `protobuf:"varint,2,opt,name=tx_output_index,json=txOutputIndex,proto3" json:"tx_output_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUnlockTakerTxParamsRequest) Reset() {
	*x = GetUnlockTakerTxParamsRequest{}
	mi := &file_bc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnlockTakerTxParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnlockTakerTxParamsRequest) ProtoMessage() {}

func (x *GetUnlockTakerTxParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnlockTakerTxParamsRequest.ProtoReflect.Descriptor instead.
func (*GetUnlockTakerTxParamsRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{19}
}

func (x *GetUnlockTakerTxParamsRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *GetUnlockTakerTxParamsRequest) GetTxOutputIndex() uint32 {
	if x != nil {
		return x.TxOutputIndex
	}
	return 0
}

type GetUnlockTakerTxParamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnlockScripts []string               `protobuf:"bytes,1,rep,name=unlock_scripts,json=unlockScripts,proto3" json:"unlock_scripts,omitempty"`
	ValueInTx     []byte                 `protobuf:"bytes,2,opt,name=value_in_tx,json=valueInTx,proto3" json:"value_in_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUnlockTakerTxParamsResponse) Reset() {
	*x = GetUnlockTakerTxParamsResponse{}
	mi := &file_bc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnlockTakerTxParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnlockTakerTxParamsResponse) ProtoMessage() {}

func (x *GetUnlockTakerTxParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnlockTakerTxParamsResponse.ProtoReflect.Descriptor instead.
func (*GetUnlockTakerTxParamsResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{20}
}

func (x *GetUnlockTakerTxParamsResponse) GetUnlockScripts() []string {
	if x != nil {
		return x.UnlockScripts
	}
	return nil
}

func (x *GetUnlockTakerTxParamsResponse) GetValueInTx() []byte {
	if x != nil {
		return x.ValueInTx
	}
	return nil
}

type MakerOrderInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TradeHeight           uint64                 `protobuf:"varint,1,opt,name=trade_height,json=tradeHeight,proto3" json:"trade_height,omitempty"`
	Deposit               uint64                 `protobuf:"varint,2,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Settlement            uint64                 `protobuf:"varint,3,opt,name=settlement,proto3" json:"settlement,omitempty"`
	ShiftMaker            uint64                 `protobuf:"varint,4,opt,name=shift_maker,json=shiftMaker,proto3" json:"shift_maker,omitempty"`
	ShiftTaker            uint64                 `protobuf:"varint,5,opt,name=shift_taker,json=shiftTaker,proto3" json:"shift_taker,omitempty"`
	SendsFromChain        string                 `protobuf:"bytes,6,opt,name=sends_from_chain,json=sendsFromChain,proto3" json:"sends_from_chain,omitempty"`
	ReceivesToChain       string                 `protobuf:"bytes,7,opt,name=receives_to_chain,json=receivesToChain,proto3" json:"receives_to_chain,omitempty"`
	SendsFromAddress      string                 `protobuf:"bytes,8,opt,name=sends_from_address,json=sendsFromAddress,proto3" json:"sends_from_address,omitempty"`
	ReceivesToAddress     string                 `protobuf:"bytes,9,opt,name=receives_to_address,json=receivesToAddress,proto3" json:"receives_to_address,omitempty"`
	SendsUnit             string                 `protobuf:"bytes,10,opt,name=sends_unit,json=sendsUnit,proto3" json:"sends_unit,omitempty"`
	ReceivesUnit          string                 `protobuf:"bytes,11,opt,name=receives_unit,json=receivesUnit,proto3" json:"receives_unit,omitempty"`
	DoubleHashedBcAddress string                 `protobuf:"bytes,12,opt,name=double_hashed_bc_address,json=doubleHashedBcAddress,proto3" json:"double_hashed_bc_address,omitempty"`
	CollateralizedNrg     string                 `protobuf:"bytes,13,opt,name=collateralized_nrg,json=collateralizedNrg,proto3" json:"collateralized_nrg,omitempty"`
	OriginalNrg           string                 `protobuf:"bytes,14,opt,name=original_nrg,json=originalNrg,proto3" json:"original_nrg,omitempty"`
	NrgUnit               string                 `protobuf:"bytes,15,opt,name=nrg_unit,json=nrgUnit,proto3" json:"nrg_unit,omitempty"`
	TxHash                string                 `protobuf:"bytes,16,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxOutputIndex         uint32                 `protobuf:"varint,17,opt,name=tx_output_index,json=txOutputIndex,proto3" json:"tx_output_index,omitempty"`
	IsSettled             bool                   `protobuf:"varint,18,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty"`
	FixedUnitFee          string                 `protobuf:"bytes,19,opt,name=fixed_unit_fee,json=fixedUnitFee,proto3" json:"fixed_unit_fee,omitempty"`
	Base                  uint32                 `protobuf:"varint,20,opt,name=base,proto3" json:"base,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MakerOrderInfo) Reset() {
	*x = MakerOrderInfo{}
	mi := &file_bc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MakerOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakerOrderInfo) ProtoMessage() {}

func (x *MakerOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakerOrderInfo.ProtoReflect.Descriptor instead.
func (*MakerOrderInfo) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{21}
}

func (x *MakerOrderInfo) GetTradeHeight() uint64 {
	if x != nil {
		return x.TradeHeight
	}
	return 0
}

func (x *MakerOrderInfo) GetDeposit() uint64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *MakerOrderInfo) GetSettlement() uint64 {
	if x != nil {
		return x.Settlement
	}
	return 0
}

func (x *MakerOrderInfo) GetShiftMaker() uint64 {
	if x != nil {
		return x.ShiftMaker
	}
	return 0
}

func (x *MakerOrderInfo) GetShiftTaker() uint64 {
	if x != nil {
		return x.ShiftTaker
	}
	return 0
}

func (x *MakerOrderInfo) GetSendsFromChain() string {
	if x != nil {
		return x.SendsFromChain
	}
	return ""
}

func (x *MakerOrderInfo) GetReceivesToChain() string {
	if x != nil {
		return x.ReceivesToChain
	}
	return ""
}

func (x *MakerOrderInfo) GetSendsFromAddress() string {
	if x != nil {
		return x.SendsFromAddress
	}
	return ""
}

func (x *MakerOrderInfo) GetReceivesToAddress() string {
	if x != nil {
		return x.ReceivesToAddress
	}
	return ""
}

func (x *MakerOrderInfo) GetSendsUnit() string {
	if x != nil {
		return x.SendsUnit
	}
	return ""
}

func (x *MakerOrderInfo) GetReceivesUnit() string {
	if x != nil {
		return x.ReceivesUnit
	}
	return ""
}

func (x *MakerOrderInfo) GetDoubleHashedBcAddress() string {
	if x != nil {
		return x.DoubleHashedBcAddress
	}
	return ""
}

func (x *MakerOrderInfo) GetCollateralizedNrg() string {
	if x != nil {
		return x.CollateralizedNrg
	}
	return ""
}

func (x *MakerOrderInfo) GetOriginalNrg() string {
	if x != nil {
		return x.OriginalNrg
	}
	return ""
}

func (x *MakerOrderInfo) GetNrgUnit() string {
	if x != nil {
		return x.NrgUnit
	}
	return ""
}

func (x *MakerOrderInfo) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *MakerOrderInfo) GetTxOutputIndex() uint32 {
	if x != nil {
		return x.TxOutputIndex
	}
	return 0
}

func (x *MakerOrderInfo) GetIsSettled() bool {
	if x != nil {
		return x.IsSettled
	}
	return false
}

func (x *MakerOrderInfo) GetFixedUnitFee() string {
	if x != nil {
		return x.FixedUnitFee
	}
	return ""
}

func (x *MakerOrderInfo) GetBase() uint32 {
	if x != nil {
		return x.Base
	}
	return 0
}

type TakerOrderInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SendsFromAddress      string                 `protobuf:"bytes,1,opt,name=sends_from_address,json=sendsFromAddress,proto3" json:"sends_from_address,omitempty"`
	ReceivesToAddress     string                 `protobuf:"bytes,2,opt,name=receives_to_address,json=receivesToAddress,proto3" json:"receives_to_address,omitempty"`
	DoubleHashedBcAddress string                 `protobuf:"bytes,3,opt,name=double_hashed_bc_address,json=doubleHashedBcAddress,proto3" json:"double_hashed_bc_address,omitempty"`
	IsSettled             bool                   `protobuf:"varint,4,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty"`
	TxHash                string                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxOutputIndex         uint32                 `protobuf:"varint,6,opt,name=tx_output_index,json=txOutputIndex,proto3" json:"tx_output_index,omitempty"`
	TotalCollateral       string                 `protobuf:"bytes,7,opt,name=total_collateral,json=totalCollateral,proto3" json:"total_collateral,omitempty"`
	TradeHeight           uint64                 `protobuf:"varint,8,opt,name=trade_height,json=tradeHeight,proto3" json:"trade_height,omitempty"`
	Timestamp             uint64                 `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TakerOrderInfo) Reset() {
	*x = TakerOrderInfo{}
	mi := &file_bc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakerOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakerOrderInfo) ProtoMessage() {}

func (x *TakerOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakerOrderInfo.ProtoReflect.Descriptor instead.
func (*TakerOrderInfo) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{22}
}

func (x *TakerOrderInfo) GetSendsFromAddress() string {
	if x != nil {
		return x.SendsFromAddress
	}
	return ""
}

func (x *TakerOrderInfo) GetReceivesToAddress() string {
	if x != nil {
		return x.ReceivesToAddress
	}
	return ""
}

func (x *TakerOrderInfo) GetDoubleHashedBcAddress() string {
	if x != nil {
		return x.DoubleHashedBcAddress
	}
	return ""
}

func (x *TakerOrderInfo) GetIsSettled() bool {
	if x != nil {
		return x.IsSettled
	}
	return false
}

func (x *TakerOrderInfo) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TakerOrderInfo) GetTxOutputIndex() uint32 {
	if x != nil {
		return x.TxOutputIndex
	}
	return 0
}

func (x *TakerOrderInfo) GetTotalCollateral() string {
	if x != nil {
		return x.TotalCollateral
	}
	return ""
}

func (x *TakerOrderInfo) GetTradeHeight() uint64 {
	if x != nil {
		return x.TradeHeight
	}
	return 0
}

func (x *TakerOrderInfo) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type MatchedOrderInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Maker         *MakerOrderInfo        `protobuf:"bytes,1,opt,name=maker,proto3" json:"maker,omitempty"`
	Taker         *TakerOrderInfo        `protobuf:"bytes,2,opt,name=taker,proto3" json:"taker,omitempty"`
	Unlocked      bool                   `protobuf:"varint,7,opt,name=unlocked,proto3" json:"unlocked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchedOrderInfo) Reset() {
	*x = MatchedOrderInfo{}
	mi := &file_bc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchedOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedOrderInfo) ProtoMessage() {}

func (x *MatchedOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedOrderInfo.ProtoReflect.Descriptor instead.
func (*MatchedOrderInfo) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{23}
}

func (x *MatchedOrderInfo) GetMaker() *MakerOrderInfo {
	if x != nil {
		return x.Maker
	}
	return nil
}

func (x *MatchedOrderInfo) GetTaker() *TakerOrderInfo {
	if x != nil {
		return x.Taker
	}
	return nil
}

func (x *MatchedOrderInfo) GetUnlocked() bool {
	if x != nil {
		return x.Unlocked
	}
	return false
}

type GetOpenOrdersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orders        []*MakerOrderInfo      `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOpenOrdersResponse) Reset() {
	*x = GetOpenOrdersResponse{}
	mi := &file_bc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOpenOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenOrdersResponse) ProtoMessage() {}

func (x *GetOpenOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetOpenOrdersResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{24}
}

func (x *GetOpenOrdersResponse) GetOrders() []*MakerOrderInfo {
	if x != nil {
		return x.Orders
	}
	return nil
}

type GetMatchedOrdersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orders        []*MatchedOrderInfo    `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMatchedOrdersResponse) Reset() {
	*x = GetMatchedOrdersResponse{}
	mi := &file_bc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchedOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchedOrdersResponse) ProtoMessage() {}

func (x *GetMatchedOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchedOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetMatchedOrdersResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{25}
}

func (x *GetMatchedOrdersResponse) GetOrders() []*MatchedOrderInfo {
	if x != nil {
		return x.Orders
	}
	return nil
}

type GetHistoricalOrdersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orders        []*MatchedOrderInfo    `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	NextBlock     uint64                 `protobuf:"varint,2,opt,name=next_block,json=nextBlock,proto3" json:"next_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHistoricalOrdersResponse) Reset() {
	*x = GetHistoricalOrdersResponse{}
	mi := &file_bc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoricalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalOrdersResponse) ProtoMessage() {}

func (x *GetHistoricalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetHistoricalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{26}
}

func (x *GetHistoricalOrdersResponse) GetOrders() []*MatchedOrderInfo {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *GetHistoricalOrdersResponse) GetNextBlock() uint64 {
	if x != nil {
		return x.NextBlock
	}
	return 0
}

type TakerOrder struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SendsFromAddress   string                 `protobuf:"bytes,1,opt,name=sends_from_address,json=sendsFromAddress,proto3" json:"sends_from_address,omitempty"`
	ReceivesToAddress  string                 `protobuf:"bytes,2,opt,name=receives_to_address,json=receivesToAddress,proto3" json:"receives_to_address,omitempty"`
	MakerTxHash        string                 `protobuf:"bytes,3,opt,name=maker_tx_hash,json=makerTxHash,proto3" json:"maker_tx_hash,omitempty"`
	MakerTxOutputIndex uint32                 `protobuf:"varint,4,opt,name=maker_tx_output_index,json=makerTxOutputIndex,proto3" json:"maker_tx_output_index,omitempty"`
	CollateralizedNrg  string                 `protobuf:"bytes,5,opt,name=collateralized_nrg,json=collateralizedNrg,proto3" json:"collateralized_nrg,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TakerOrder) Reset() {
	*x = TakerOrder{}
	mi := &file_bc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakerOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakerOrder) ProtoMessage() {}

func (x *TakerOrder) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakerOrder.ProtoReflect.Descriptor instead.
func (*TakerOrder) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{27}
}

func (x *TakerOrder) GetSendsFromAddress() string {
	if x != nil {
		return x.SendsFromAddress
	}
	return ""
}

func (x *TakerOrder) GetReceivesToAddress() string {
	if x != nil {
		return x.ReceivesToAddress
	}
	return ""
}

func (x *TakerOrder) GetMakerTxHash() string {
	if x != nil {
		return x.MakerTxHash
	}
	return ""
}

func (x *TakerOrder) GetMakerTxOutputIndex() uint32 {
	if x != nil {
		return x.MakerTxOutputIndex
	}
	return 0
}

func (x *TakerOrder) GetCollateralizedNrg() string {
	if x != nil {
		return x.CollateralizedNrg
	}
	return ""
}

type GetBlake2BlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToBeHashed    string                 `protobuf:"bytes,1,opt,name=to_be_hashed,json=toBeHashed,proto3" json:"to_be_hashed,omitempty"`
	Times         uint32                 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlake2BlRequest) Reset() {
	*x = GetBlake2BlRequest{}
	mi := &file_bc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlake2BlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlake2BlRequest) ProtoMessage() {}

func (x *GetBlake2BlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlake2BlRequest.ProtoReflect.Descriptor instead.
func (*GetBlake2BlRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{28}
}

func (x *GetBlake2BlRequest) GetToBeHashed() string {
	if x != nil {
		return x.ToBeHashed
	}
	return ""
}

func (x *GetBlake2BlRequest) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

type GetBlake2BlResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlake2BlResponse) Reset() {
	*x = GetBlake2BlResponse{}
	mi := &file_bc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlake2BlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlake2BlResponse) ProtoMessage() {}

func (x *GetBlake2BlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlake2BlResponse.ProtoReflect.Descriptor instead.
func (*GetBlake2BlResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{29}
}

func (x *GetBlake2BlResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type VanityConvertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vanity        string                 `protobuf:"bytes,1,opt,name=vanity,proto3" json:"vanity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VanityConvertRequest) Reset() {
	*x = VanityConvertRequest{}
	mi := &file_bc_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VanityConvertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VanityConvertRequest) ProtoMessage() {}

func (x *VanityConvertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VanityConvertRequest.ProtoReflect.Descriptor instead.
func (*VanityConvertRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{30}
}

func (x *VanityConvertRequest) GetVanity() string {
	if x != nil {
		return x.Vanity
	}
	return ""
}

type VanityConvertResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BcAddress     string                 `protobuf:"bytes,1,opt,name=bc_address,json=bcAddress,proto3" json:"bc_address,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VanityConvertResponse) Reset() {
	*x = VanityConvertResponse{}
	mi := &file_bc_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VanityConvertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VanityConvertResponse) ProtoMessage() {}

func (x *VanityConvertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VanityConvertResponse.ProtoReflect.Descriptor instead.
func (*VanityConvertResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{31}
}

func (x *VanityConvertResponse) GetBcAddress() string {
	if x != nil {
		return x.BcAddress
	}
	return ""
}

func (x *VanityConvertResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetRoveredBlockHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blockchain    string                 `protobuf:"bytes,1,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoveredBlockHashRequest) Reset() {
	*x = GetRoveredBlockHashRequest{}
	mi := &file_bc_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoveredBlockHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoveredBlockHashRequest) ProtoMessage() {}

func (x *GetRoveredBlockHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoveredBlockHashRequest.ProtoReflect.Descriptor instead.
func (*GetRoveredBlockHashRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{32}
}

func (x *GetRoveredBlockHashRequest) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *GetRoveredBlockHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetRoveredBlockHeightRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blockchain    string                 `protobuf:"bytes,1,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	Height        uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoveredBlockHeightRequest) Reset() {
	*x = GetRoveredBlockHeightRequest{}
	mi := &file_bc_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoveredBlockHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoveredBlockHeightRequest) ProtoMessage() {}

func (x *GetRoveredBlockHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoveredBlockHeightRequest.ProtoReflect.Descriptor instead.
func (*GetRoveredBlockHeightRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{33}
}

func (x *GetRoveredBlockHeightRequest) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *GetRoveredBlockHeightRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBlockHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHashRequest) Reset() {
	*x = GetBlockHashRequest{}
	mi := &file_bc_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHashRequest) ProtoMessage() {}

func (x *GetBlockHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHashRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHashRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{34}
}

func (x *GetBlockHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBlockHeightRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        uint32                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockHeightRequest) Reset() {
	*x = GetBlockHeightRequest{}
	mi := &file_bc_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockHeightRequest) ProtoMessage() {}

func (x *GetBlockHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockHeightRequest.ProtoReflect.Descriptor instead.
func (*GetBlockHeightRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{35}
}

func (x *GetBlockHeightRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBlocksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartHeight   uint32                 `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight     uint32                 `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksRequest) Reset() {
	*x = GetBlocksRequest{}
	mi := &file_bc_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksRequest) ProtoMessage() {}

func (x *GetBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetBlocksRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{36}
}

func (x *GetBlocksRequest) GetStartHeight() uint32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetBlocksRequest) GetEndHeight() uint32 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetBlocksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*BcBlock             `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksResponse) Reset() {
	*x = GetBlocksResponse{}
	mi := &file_bc_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksResponse) ProtoMessage() {}

func (x *GetBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetBlocksResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{37}
}

func (x *GetBlocksResponse) GetBlocks() []*BcBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetRoveredBlocksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blockchain    string                 `protobuf:"bytes,1,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	StartHeight   uint32                 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight     uint32                 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoveredBlocksRequest) Reset() {
	*x = GetRoveredBlocksRequest{}
	mi := &file_bc_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoveredBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoveredBlocksRequest) ProtoMessage() {}

func (x *GetRoveredBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoveredBlocksRequest.ProtoReflect.Descriptor instead.
func (*GetRoveredBlocksRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{38}
}

func (x *GetRoveredBlocksRequest) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *GetRoveredBlocksRequest) GetStartHeight() uint32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetRoveredBlocksRequest) GetEndHeight() uint32 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetRawMempoolResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transactions  []*Transaction         `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRawMempoolResponse) Reset() {
	*x = GetRawMempoolResponse{}
	mi := &file_bc_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRawMempoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawMempoolResponse) ProtoMessage() {}

func (x *GetRawMempoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawMempoolResponse.ProtoReflect.Descriptor instead.
func (*GetRawMempoolResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{39}
}

func (x *GetRawMempoolResponse) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GetRoveredBlocksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*Block               `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoveredBlocksResponse) Reset() {
	*x = GetRoveredBlocksResponse{}
	mi := &file_bc_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoveredBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoveredBlocksResponse) ProtoMessage() {}

func (x *GetRoveredBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoveredBlocksResponse.ProtoReflect.Descriptor instead.
func (*GetRoveredBlocksResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{40}
}

func (x *GetRoveredBlocksResponse) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTxRequest) Reset() {
	*x = GetTxRequest{}
	mi := &file_bc_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxRequest) ProtoMessage() {}

func (x *GetTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxRequest.ProtoReflect.Descriptor instead.
func (*GetTxRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{41}
}

func (x *GetTxRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetMarkedTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blockchain    string                 `protobuf:"bytes,1,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarkedTxRequest) Reset() {
	*x = GetMarkedTxRequest{}
	mi := &file_bc_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarkedTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkedTxRequest) ProtoMessage() {}

func (x *GetMarkedTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkedTxRequest.ProtoReflect.Descriptor instead.
func (*GetMarkedTxRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{42}
}

func (x *GetMarkedTxRequest) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *GetMarkedTxRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetOutPointRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Index         uint32                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOutPointRequest) Reset() {
	*x = GetOutPointRequest{}
	mi := &file_bc_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOutPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutPointRequest) ProtoMessage() {}

func (x *GetOutPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutPointRequest.ProtoReflect.Descriptor instead.
func (*GetOutPointRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{43}
}

func (x *GetOutPointRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetOutPointRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GetBlocksByRoveredHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blockchain    string                 `protobuf:"bytes,1,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksByRoveredHashRequest) Reset() {
	*x = GetBlocksByRoveredHashRequest{}
	mi := &file_bc_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksByRoveredHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksByRoveredHashRequest) ProtoMessage() {}

func (x *GetBlocksByRoveredHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksByRoveredHashRequest.ProtoReflect.Descriptor instead.
func (*GetBlocksByRoveredHashRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{44}
}

func (x *GetBlocksByRoveredHashRequest) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *GetBlocksByRoveredHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBlocksByRoveredHashResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*BcBlock             `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlocksByRoveredHashResponse) Reset() {
	*x = GetBlocksByRoveredHashResponse{}
	mi := &file_bc_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlocksByRoveredHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlocksByRoveredHashResponse) ProtoMessage() {}

func (x *GetBlocksByRoveredHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlocksByRoveredHashResponse.ProtoReflect.Descriptor instead.
func (*GetBlocksByRoveredHashResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{45}
}

func (x *GetBlocksByRoveredHashResponse) GetBlocks() []*BcBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetTradeStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        uint32                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTradeStatusResponse) Reset() {
	*x = GetTradeStatusResponse{}
	mi := &file_bc_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTradeStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradeStatusResponse) ProtoMessage() {}

func (x *GetTradeStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradeStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTradeStatusResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{46}
}

func (x *GetTradeStatusResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetOutPointStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Unspent       bool                   `protobuf:"varint,1,opt,name=unspent,proto3" json:"unspent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOutPointStatusResponse) Reset() {
	*x = GetOutPointStatusResponse{}
	mi := &file_bc_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOutPointStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutPointStatusResponse) ProtoMessage() {}

func (x *GetOutPointStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutPointStatusResponse.ProtoReflect.Descriptor instead.
func (*GetOutPointStatusResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{47}
}

func (x *GetOutPointStatusResponse) GetUnspent() bool {
	if x != nil {
		return x.Unspent
	}
	return false
}

type CurrentWork struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Work          string                 `protobuf:"bytes,1,opt,name=work,proto3" json:"work,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrentWork) Reset() {
	*x = CurrentWork{}
	mi := &file_bc_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentWork) ProtoMessage() {}

func (x *CurrentWork) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentWork.ProtoReflect.Descriptor instead.
func (*CurrentWork) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{48}
}

func (x *CurrentWork) GetWork() string {
	if x != nil {
		return x.Work
	}
	return ""
}

type SyncStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncStatus) Reset() {
	*x = SyncStatus{}
	mi := &file_bc_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatus) ProtoMessage() {}

func (x *SyncStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatus.ProtoReflect.Descriptor instead.
func (*SyncStatus) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{49}
}

func (x *SyncStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NgrokTunnel   string                 `protobuf:"bytes,1,opt,name=ngrok_tunnel,json=ngrokTunnel,proto3" json:"ngrok_tunnel,omitempty"`
	BuildVersion  string                 `protobuf:"bytes,2,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SettingsResponse) Reset() {
	*x = SettingsResponse{}
	mi := &file_bc_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsResponse) ProtoMessage() {}

func (x *SettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsResponse.ProtoReflect.Descriptor instead.
func (*SettingsResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{50}
}

func (x *SettingsResponse) GetNgrokTunnel() string {
	if x != nil {
		return x.NgrokTunnel
	}
	return ""
}

func (x *SettingsResponse) GetBuildVersion() string {
	if x != nil {
		return x.BuildVersion
	}
	return ""
}

type GetNrgSupplyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        string                 `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNrgSupplyResponse) Reset() {
	*x = GetNrgSupplyResponse{}
	mi := &file_bc_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNrgSupplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNrgSupplyResponse) ProtoMessage() {}

func (x *GetNrgSupplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNrgSupplyResponse.ProtoReflect.Descriptor instead.
func (*GetNrgSupplyResponse) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{51}
}

func (x *GetNrgSupplyResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetMarkedTxs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Txs           []*MarkedTransaction   `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarkedTxs) Reset() {
	*x = GetMarkedTxs{}
	mi := &file_bc_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarkedTxs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkedTxs) ProtoMessage() {}

func (x *GetMarkedTxs) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkedTxs.ProtoReflect.Descriptor instead.
func (*GetMarkedTxs) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{52}
}

func (x *GetMarkedTxs) GetTxs() []*MarkedTransaction {
	if x != nil {
		return x.Txs
	}
	return nil
}

type FeedBalance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Amount        string                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedBalance) Reset() {
	*x = FeedBalance{}
	mi := &file_bc_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedBalance) ProtoMessage() {}

func (x *FeedBalance) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedBalance.ProtoReflect.Descriptor instead.
func (*FeedBalance) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{53}
}

func (x *FeedBalance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeedBalance) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type FeedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Balances      []*FeedBalance         `protobuf:"bytes,3,rep,name=balances,proto3" json:"balances,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedMessage) Reset() {
	*x = FeedMessage{}
	mi := &file_bc_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedMessage) ProtoMessage() {}

func (x *FeedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedMessage.ProtoReflect.Descriptor instead.
func (*FeedMessage) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{54}
}

func (x *FeedMessage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FeedMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FeedMessage) GetBalances() []*FeedBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *FeedMessage) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type FeedMessages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*FeedMessage         `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedMessages) Reset() {
	*x = FeedMessages{}
	mi := &file_bc_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedMessages) ProtoMessage() {}

func (x *FeedMessages) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedMessages.ProtoReflect.Descriptor instead.
func (*FeedMessages) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{55}
}

func (x *FeedMessages) GetMessages() []*FeedMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type GetFeedMessagesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          uint64                 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To            uint64                 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFeedMessagesRequest) Reset() {
	*x = GetFeedMessagesRequest{}
	mi := &file_bc_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeedMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeedMessagesRequest) ProtoMessage() {}

func (x *GetFeedMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bc_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeedMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetFeedMessagesRequest) Descriptor() ([]byte, []int) {
	return file_bc_proto_rawDescGZIP(), []int{56}
}

func (x *GetFeedMessagesRequest) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *GetFeedMessagesRequest) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

var File_bc_proto protoreflect.FileDescriptor

var file_bc_proto_rawDesc = string([]byte{
	0x0a, 0x08, 0x62, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x63, 0x2e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x54, 0x65, 0x78, 0x74,
	0x22, 0x5c, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x47, 0x70, 0x75, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9d,
	0x01, 0x0a, 0x0e, 0x52, 0x70, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x78, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x65, 0x78, 0x22, 0xa0,
	0x03, 0x0a, 0x19, 0x52, 0x70, 0x63, 0x46, 0x65, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x65, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x65, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x63,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x46, 0x65, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x78, 0x50, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x78, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x78, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x65,
	0x78, 0x22, 0xc7, 0x03, 0x0a, 0x1f, 0x52, 0x70, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x78, 0x46, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x78, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x50, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x78, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x78, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x65, 0x78, 0x22, 0x8a, 0x01, 0x0a, 0x16,
	0x52, 0x70, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x78,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x51, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x39, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x6b, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x74, 0x78, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x5d, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x75,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x45, 0x6d, 0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x26, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x78,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x67,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72,
	0x54, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x6e, 0x54, 0x78, 0x22, 0xe7, 0x05, 0x0a, 0x0e, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x6e,
	0x64, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6e,
	0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x62, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x42, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x72, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x72, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x72, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x72, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x72, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x72, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x22, 0xf3, 0x02, 0x0a, 0x0e, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x62, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x42, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x78,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x05,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x63,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x05, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x4c,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x73, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74,
	0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x72, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4e, 0x72, 0x67, 0x22, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x61, 0x6b, 0x65, 0x32, 0x62, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x74, 0x6f, 0x5f, 0x62, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x42, 0x65, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6b,
	0x65, 0x32, 0x62, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x2e, 0x0a, 0x14, 0x56, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6e, 0x69, 0x74, 0x79,
	0x22, 0x4c, 0x0a, 0x15, 0x56, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x50,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x56, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x63, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x7b, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77,
	0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x22, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x48, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x54, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x3e, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x53, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x4a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x63, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x30, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x35,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x24, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5a,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x67, 0x72, 0x6f, 0x6b, 0x5f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x67, 0x72, 0x6f, 0x6b, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4e, 0x72, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x54, 0x78, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x78,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x63, 0x2e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x44, 0x0a, 0x0c, 0x46,
	0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x6f, 0x2a,
	0x24, 0x0a, 0x17, 0x46, 0x65, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x59,
	0x50, 0x45, 0x31, 0x10, 0x00, 0x2a, 0x38, 0x0a, 0x1c, 0x52, 0x70, 0x63, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x01, 0x32,
	0x80, 0x24, 0x0a, 0x02, 0x42, 0x63, 0x12, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x23, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46,
	0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x63,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x63, 0x2e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x27, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x62, 0x63,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x0d, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a,
	0x25, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e,
	0x72, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0d, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x21, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x72, 0x67, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x2e, 0x62,
	0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x22, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0d, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x10, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0d,
	0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x10, 0x2e,
	0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x54, 0x78, 0x12, 0x19, 0x2e, 0x62, 0x63, 0x2e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x54, 0x78, 0x12, 0x1f, 0x2e, 0x62,
	0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x54, 0x78, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x62, 0x63, 0x2e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x63,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x54, 0x78, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x62, 0x63, 0x2e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x63,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x0d,
	0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x22, 0x2e,
	0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x77, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x79, 0x54, 0x78, 0x12, 0x19, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x54, 0x78,
	0x12, 0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0e, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x0d, 0x2e, 0x62, 0x63,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x19, 0x2e, 0x62, 0x63, 0x2e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x0d, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a,
	0x1a, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0d, 0x2e, 0x62,
	0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x1d, 0x2e, 0x62, 0x63,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x07,
	0x4e, 0x65, 0x77, 0x46, 0x65, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x65, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x70,
	0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x52, 0x70, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x05, 0x4e, 0x65, 0x77,
	0x54, 0x78, 0x12, 0x1b, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x52, 0x70, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x23, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x70,
	0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x78,
	0x12, 0x14, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e,
	0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x62, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x1e, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12,
	0x2a, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x63,
	0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x6b, 0x65,
	0x72, 0x54, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x78, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x46, 0x65, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x62, 0x63, 0x2e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x6b, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x62,
	0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x63, 0x2e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x2e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x6b,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x1c, 0x2e, 0x62,
	0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74,
	0x78, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x62, 0x63, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x2e,
	0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x74, 0x78, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x54, 0x58,
	0x4f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x63, 0x2e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x74, 0x78, 0x6f,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x2e, 0x62, 0x63, 0x2e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79,
	0x52, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6b,
	0x65, 0x32, 0x62, 0x6c, 0x12, 0x1f, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x32, 0x62, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x32, 0x62, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x42, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x69, 0x61, 0x56, 0x61, 0x6e, 0x69,
	0x74, 0x79, 0x12, 0x21, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x56, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x56, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x0d, 0x2e,
	0x62, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x18, 0x2e, 0x62,
	0x63, 0x2e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x62, 0x63, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x17, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x61, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x62, 0x63, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x17, 0x2e, 0x62, 0x63, 0x2e, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_bc_proto_rawDescOnce sync.Once
	file_bc_proto_rawDescData []byte
)

func file_bc_proto_rawDescGZIP() []byte {
	file_bc_proto_rawDescOnce.Do(func() {
		file_bc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bc_proto_rawDesc), len(file_bc_proto_rawDesc)))
	})
	return file_bc_proto_rawDescData
}

var file_bc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bc_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_bc_proto_goTypes = []any{
	(FeedTransactionDataType)(0),            // 0: bc.exchange.FeedTransactionDataType
	(RpcTransactionResponseStatus)(0),       // 1: bc.exchange.RpcTransactionResponseStatus
	(*HelpResponse)(nil),                    // 2: bc.exchange.HelpResponse
	(*StatsResponse)(nil),                   // 3: bc.exchange.StatsResponse
	(*RpcTransaction)(nil),                  // 4: bc.exchange.RpcTransaction
	(*RpcFeedTransactionRequest)(nil),       // 5: bc.exchange.RpcFeedTransactionRequest
	(*RpcUpdateFeedTransactionRequest)(nil), // 6: bc.exchange.RpcUpdateFeedTransactionRequest
	(*RpcTransactionResponse)(nil),          // 7: bc.exchange.RpcTransactionResponse
	(*Transfer)(nil),                        // 8: bc.exchange.Transfer
	(*TransferRequest)(nil),                 // 9: bc.exchange.TransferRequest
	(*GetHistoryRequest)(nil),               // 10: bc.exchange.GetHistoryRequest
	(*TransferResponse)(nil),                // 11: bc.exchange.TransferResponse
	(*GetUtxoLengthRequest)(nil),            // 12: bc.exchange.GetUtxoLengthRequest
	(*GetUtxosRequest)(nil),                 // 13: bc.exchange.GetUtxosRequest
	(*GetUtxoLengthResponse)(nil),           // 14: bc.exchange.GetUtxoLengthResponse
	(*GetSpendableCollateralRequest)(nil),   // 15: bc.exchange.GetSpendableCollateralRequest
	(*GetSpendableCollateralResponse)(nil),  // 16: bc.exchange.GetSpendableCollateralResponse
	(*GetBalanceRequest)(nil),               // 17: bc.exchange.GetBalanceRequest
	(*GetEmbBalanceResponse)(nil),           // 18: bc.exchange.GetEmbBalanceResponse
	(*GetByteFeeResponse)(nil),              // 19: bc.exchange.GetByteFeeResponse
	(*GetBalanceResponse)(nil),              // 20: bc.exchange.GetBalanceResponse
	(*GetUnlockTakerTxParamsRequest)(nil),   // 21: bc.exchange.GetUnlockTakerTxParamsRequest
	(*GetUnlockTakerTxParamsResponse)(nil),  // 22: bc.exchange.GetUnlockTakerTxParamsResponse
	(*MakerOrderInfo)(nil),                  // 23: bc.exchange.MakerOrderInfo
	(*TakerOrderInfo)(nil),                  // 24: bc.exchange.TakerOrderInfo
	(*MatchedOrderInfo)(nil),                // 25: bc.exchange.MatchedOrderInfo
	(*GetOpenOrdersResponse)(nil),           // 26: bc.exchange.GetOpenOrdersResponse
	(*GetMatchedOrdersResponse)(nil),        // 27: bc.exchange.GetMatchedOrdersResponse
	(*GetHistoricalOrdersResponse)(nil),     // 28: bc.exchange.GetHistoricalOrdersResponse
	(*TakerOrder)(nil),                      // 29: bc.exchange.TakerOrder
	(*GetBlake2BlRequest)(nil),              // 30: bc.exchange.GetBlake2blRequest
	(*GetBlake2BlResponse)(nil),             // 31: bc.exchange.GetBlake2blResponse
	(*VanityConvertRequest)(nil),            // 32: bc.exchange.VanityConvertRequest
	(*VanityConvertResponse)(nil),           // 33: bc.exchange.VanityConvertResponse
	(*GetRoveredBlockHashRequest)(nil),      // 34: bc.exchange.GetRoveredBlockHashRequest
	(*GetRoveredBlockHeightRequest)(nil),    // 35: bc.exchange.GetRoveredBlockHeightRequest
	(*GetBlockHashRequest)(nil),             // 36: bc.exchange.GetBlockHashRequest
	(*GetBlockHeightRequest)(nil),           // 37: bc.exchange.GetBlockHeightRequest
	(*GetBlocksRequest)(nil),                // 38: bc.exchange.GetBlocksRequest
	(*GetBlocksResponse)(nil),               // 39: bc.exchange.GetBlocksResponse
	(*GetRoveredBlocksRequest)(nil),         // 40: bc.exchange.GetRoveredBlocksRequest
	(*GetRawMempoolResponse)(nil),           // 41: bc.exchange.GetRawMempoolResponse
	(*GetRoveredBlocksResponse)(nil),        // 42: bc.exchange.GetRoveredBlocksResponse
	(*GetTxRequest)(nil),                    // 43: bc.exchange.GetTxRequest
	(*GetMarkedTxRequest)(nil),              // 44: bc.exchange.GetMarkedTxRequest
	(*GetOutPointRequest)(nil),              // 45: bc.exchange.GetOutPointRequest
	(*GetBlocksByRoveredHashRequest)(nil),   // 46: bc.exchange.GetBlocksByRoveredHashRequest
	(*GetBlocksByRoveredHashResponse)(nil),  // 47: bc.exchange.GetBlocksByRoveredHashResponse
	(*GetTradeStatusResponse)(nil),          // 48: bc.exchange.GetTradeStatusResponse
	(*GetOutPointStatusResponse)(nil),       // 49: bc.exchange.GetOutPointStatusResponse
	(*CurrentWork)(nil),                     // 50: bc.exchange.CurrentWork
	(*SyncStatus)(nil),                      // 51: bc.exchange.SyncStatus
	(*SettingsResponse)(nil),                // 52: bc.exchange.SettingsResponse
	(*GetNrgSupplyResponse)(nil),            // 53: bc.exchange.GetNrgSupplyResponse
	(*GetMarkedTxs)(nil),                    // 54: bc.exchange.GetMarkedTxs
	(*FeedBalance)(nil),                     // 55: bc.exchange.FeedBalance
	(*FeedMessage)(nil),                     // 56: bc.exchange.FeedMessage
	(*FeedMessages)(nil),                    // 57: bc.exchange.FeedMessages
	(*GetFeedMessagesRequest)(nil),          // 58: bc.exchange.GetFeedMessagesRequest
	(*OutPoint)(nil),                        // 59: bc.core.OutPoint
	(*BcBlock)(nil),                         // 60: bc.core.BcBlock
	(*Transaction)(nil),                     // 61: bc.core.Transaction
	(*Block)(nil),                           // 62: bc.core.Block
	(*MarkedTransaction)(nil),               // 63: bc.core.MarkedTransaction
	(*Null)(nil),                            // 64: bc.core.Null
	(*WalletData)(nil),                      // 65: bc.core.WalletData
	(*Utxos)(nil),                           // 66: bc.core.Utxos
}
var file_bc_proto_depIdxs = []int32{
	0,  // 0: bc.exchange.RpcFeedTransactionRequest.data_type:type_name -> bc.exchange.FeedTransactionDataType
	0,  // 1: bc.exchange.RpcUpdateFeedTransactionRequest.data_type:type_name -> bc.exchange.FeedTransactionDataType
	1,  // 2: bc.exchange.RpcTransactionResponse.status:type_name -> bc.exchange.RpcTransactionResponseStatus
	8,  // 3: bc.exchange.TransferResponse.transfers:type_name -> bc.exchange.Transfer
	59, // 4: bc.exchange.GetSpendableCollateralResponse.outpoints:type_name -> bc.core.OutPoint
	23, // 5: bc.exchange.MatchedOrderInfo.maker:type_name -> bc.exchange.MakerOrderInfo
	24, // 6: bc.exchange.MatchedOrderInfo.taker:type_name -> bc.exchange.TakerOrderInfo
	23, // 7: bc.exchange.GetOpenOrdersResponse.orders:type_name -> bc.exchange.MakerOrderInfo
	25, // 8: bc.exchange.GetMatchedOrdersResponse.orders:type_name -> bc.exchange.MatchedOrderInfo
	25, // 9: bc.exchange.GetHistoricalOrdersResponse.orders:type_name -> bc.exchange.MatchedOrderInfo
	60, // 10: bc.exchange.GetBlocksResponse.blocks:type_name -> bc.core.BcBlock
	61, // 11: bc.exchange.GetRawMempoolResponse.transactions:type_name -> bc.core.Transaction
	62, // 12: bc.exchange.GetRoveredBlocksResponse.blocks:type_name -> bc.core.Block
	60, // 13: bc.exchange.GetBlocksByRoveredHashResponse.blocks:type_name -> bc.core.BcBlock
	63, // 14: bc.exchange.GetMarkedTxs.txs:type_name -> bc.core.MarkedTransaction
	55, // 15: bc.exchange.FeedMessage.balances:type_name -> bc.exchange.FeedBalance
	56, // 16: bc.exchange.FeedMessages.messages:type_name -> bc.exchange.FeedMessage
	58, // 17: bc.exchange.Bc.GetFeaturedFeedMessages:input_type -> bc.exchange.GetFeedMessagesRequest
	58, // 18: bc.exchange.Bc.GetSavedFeedMessages:input_type -> bc.exchange.GetFeedMessagesRequest
	58, // 19: bc.exchange.Bc.GetEphemeralFeedMessages:input_type -> bc.exchange.GetFeedMessagesRequest
	34, // 20: bc.exchange.Bc.GetRoveredBlockHash:input_type -> bc.exchange.GetRoveredBlockHashRequest
	35, // 21: bc.exchange.Bc.GetRoveredBlockHeight:input_type -> bc.exchange.GetRoveredBlockHeightRequest
	40, // 22: bc.exchange.Bc.GetRoveredBlocks:input_type -> bc.exchange.GetRoveredBlocksRequest
	64, // 23: bc.exchange.Bc.GetLatestRoveredBlocks:input_type -> bc.core.Null
	64, // 24: bc.exchange.Bc.GetNrgSupply:input_type -> bc.core.Null
	36, // 25: bc.exchange.Bc.GetBlockHash:input_type -> bc.exchange.GetBlockHashRequest
	37, // 26: bc.exchange.Bc.GetBlockHeight:input_type -> bc.exchange.GetBlockHeightRequest
	37, // 27: bc.exchange.Bc.GetBlocksHeight:input_type -> bc.exchange.GetBlockHeightRequest
	38, // 28: bc.exchange.Bc.GetBlocks:input_type -> bc.exchange.GetBlocksRequest
	64, // 29: bc.exchange.Bc.GetLatestBlock:input_type -> bc.core.Null
	64, // 30: bc.exchange.Bc.GetLatestUTXOBlock:input_type -> bc.core.Null
	43, // 31: bc.exchange.Bc.GetTx:input_type -> bc.exchange.GetTxRequest
	44, // 32: bc.exchange.Bc.GetMarkedTx:input_type -> bc.exchange.GetMarkedTxRequest
	45, // 33: bc.exchange.Bc.GetMarkedTxsForMatchedOrder:input_type -> bc.exchange.GetOutPointRequest
	45, // 34: bc.exchange.Bc.GetTradeStatus:input_type -> bc.exchange.GetOutPointRequest
	45, // 35: bc.exchange.Bc.GetOutpointStatus:input_type -> bc.exchange.GetOutPointRequest
	45, // 36: bc.exchange.Bc.GetTxClaimedBy:input_type -> bc.exchange.GetOutPointRequest
	64, // 37: bc.exchange.Bc.GetRawMempool:input_type -> bc.core.Null
	43, // 38: bc.exchange.Bc.GetBlockByTx:input_type -> bc.exchange.GetTxRequest
	44, // 39: bc.exchange.Bc.GetRoveredBlockForMarkedTx:input_type -> bc.exchange.GetMarkedTxRequest
	64, // 40: bc.exchange.Bc.Help:input_type -> bc.core.Null
	64, // 41: bc.exchange.Bc.Stats:input_type -> bc.core.Null
	64, // 42: bc.exchange.Bc.GetSettings:input_type -> bc.core.Null
	5,  // 43: bc.exchange.Bc.NewFeed:input_type -> bc.exchange.RpcFeedTransactionRequest
	6,  // 44: bc.exchange.Bc.UpdateFeed:input_type -> bc.exchange.RpcUpdateFeedTransactionRequest
	4,  // 45: bc.exchange.Bc.NewTx:input_type -> bc.exchange.RpcTransaction
	61, // 46: bc.exchange.Bc.SendTx:input_type -> bc.core.Transaction
	17, // 47: bc.exchange.Bc.GetEmbBalance:input_type -> bc.exchange.GetBalanceRequest
	17, // 48: bc.exchange.Bc.GetBalance:input_type -> bc.exchange.GetBalanceRequest
	17, // 49: bc.exchange.Bc.GetWallet:input_type -> bc.exchange.GetBalanceRequest
	15, // 50: bc.exchange.Bc.GetSpendableOutpoints:input_type -> bc.exchange.GetSpendableCollateralRequest
	15, // 51: bc.exchange.Bc.GetSpendableCollateral:input_type -> bc.exchange.GetSpendableCollateralRequest
	21, // 52: bc.exchange.Bc.GetUnlockTakerTxParams:input_type -> bc.exchange.GetUnlockTakerTxParamsRequest
	64, // 53: bc.exchange.Bc.GetByteFeeMultiplier:input_type -> bc.core.Null
	9,  // 54: bc.exchange.Bc.GetTransfers:input_type -> bc.exchange.TransferRequest
	45, // 55: bc.exchange.Bc.GetTakerForMaker:input_type -> bc.exchange.GetOutPointRequest
	45, // 56: bc.exchange.Bc.GetOpenOrder:input_type -> bc.exchange.GetOutPointRequest
	45, // 57: bc.exchange.Bc.GetOpenCallbackOrder:input_type -> bc.exchange.GetOutPointRequest
	45, // 58: bc.exchange.Bc.GetMatchedOrder:input_type -> bc.exchange.GetOutPointRequest
	15, // 59: bc.exchange.Bc.GetOpenOrders:input_type -> bc.exchange.GetSpendableCollateralRequest
	15, // 60: bc.exchange.Bc.GetMatchedOrders:input_type -> bc.exchange.GetSpendableCollateralRequest
	10, // 61: bc.exchange.Bc.GetHistoricalOrders:input_type -> bc.exchange.GetHistoryRequest
	17, // 62: bc.exchange.Bc.GetUnmatchedOrders:input_type -> bc.exchange.GetBalanceRequest
	45, // 63: bc.exchange.Bc.GetOriginalMakerOrder:input_type -> bc.exchange.GetOutPointRequest
	13, // 64: bc.exchange.Bc.GetUtxos:input_type -> bc.exchange.GetUtxosRequest
	12, // 65: bc.exchange.Bc.GetUTXOLength:input_type -> bc.exchange.GetUtxoLengthRequest
	12, // 66: bc.exchange.Bc.GetSTXOLength:input_type -> bc.exchange.GetUtxoLengthRequest
	46, // 67: bc.exchange.Bc.GetBlocksByRoveredHash:input_type -> bc.exchange.GetBlocksByRoveredHashRequest
	30, // 68: bc.exchange.Bc.GetBlake2bl:input_type -> bc.exchange.GetBlake2blRequest
	32, // 69: bc.exchange.Bc.GetBcAddressViaVanity:input_type -> bc.exchange.VanityConvertRequest
	64, // 70: bc.exchange.Bc.GetCurrentWork:input_type -> bc.core.Null
	64, // 71: bc.exchange.Bc.GetSyncStatus:input_type -> bc.core.Null
	64, // 72: bc.exchange.Bc.GetFastSyncStatus:input_type -> bc.core.Null
	57, // 73: bc.exchange.Bc.GetFeaturedFeedMessages:output_type -> bc.exchange.FeedMessages
	57, // 74: bc.exchange.Bc.GetSavedFeedMessages:output_type -> bc.exchange.FeedMessages
	57, // 75: bc.exchange.Bc.GetEphemeralFeedMessages:output_type -> bc.exchange.FeedMessages
	62, // 76: bc.exchange.Bc.GetRoveredBlockHash:output_type -> bc.core.Block
	62, // 77: bc.exchange.Bc.GetRoveredBlockHeight:output_type -> bc.core.Block
	42, // 78: bc.exchange.Bc.GetRoveredBlocks:output_type -> bc.exchange.GetRoveredBlocksResponse
	42, // 79: bc.exchange.Bc.GetLatestRoveredBlocks:output_type -> bc.exchange.GetRoveredBlocksResponse
	53, // 80: bc.exchange.Bc.GetNrgSupply:output_type -> bc.exchange.GetNrgSupplyResponse
	60, // 81: bc.exchange.Bc.GetBlockHash:output_type -> bc.core.BcBlock
	60, // 82: bc.exchange.Bc.GetBlockHeight:output_type -> bc.core.BcBlock
	39, // 83: bc.exchange.Bc.GetBlocksHeight:output_type -> bc.exchange.GetBlocksResponse
	39, // 84: bc.exchange.Bc.GetBlocks:output_type -> bc.exchange.GetBlocksResponse
	60, // 85: bc.exchange.Bc.GetLatestBlock:output_type -> bc.core.BcBlock
	60, // 86: bc.exchange.Bc.GetLatestUTXOBlock:output_type -> bc.core.BcBlock
	61, // 87: bc.exchange.Bc.GetTx:output_type -> bc.core.Transaction
	63, // 88: bc.exchange.Bc.GetMarkedTx:output_type -> bc.core.MarkedTransaction
	54, // 89: bc.exchange.Bc.GetMarkedTxsForMatchedOrder:output_type -> bc.exchange.GetMarkedTxs
	48, // 90: bc.exchange.Bc.GetTradeStatus:output_type -> bc.exchange.GetTradeStatusResponse
	49, // 91: bc.exchange.Bc.GetOutpointStatus:output_type -> bc.exchange.GetOutPointStatusResponse
	61, // 92: bc.exchange.Bc.GetTxClaimedBy:output_type -> bc.core.Transaction
	41, // 93: bc.exchange.Bc.GetRawMempool:output_type -> bc.exchange.GetRawMempoolResponse
	60, // 94: bc.exchange.Bc.GetBlockByTx:output_type -> bc.core.BcBlock
	62, // 95: bc.exchange.Bc.GetRoveredBlockForMarkedTx:output_type -> bc.core.Block
	2,  // 96: bc.exchange.Bc.Help:output_type -> bc.exchange.HelpResponse
	3,  // 97: bc.exchange.Bc.Stats:output_type -> bc.exchange.StatsResponse
	52, // 98: bc.exchange.Bc.GetSettings:output_type -> bc.exchange.SettingsResponse
	7,  // 99: bc.exchange.Bc.NewFeed:output_type -> bc.exchange.RpcTransactionResponse
	7,  // 100: bc.exchange.Bc.UpdateFeed:output_type -> bc.exchange.RpcTransactionResponse
	7,  // 101: bc.exchange.Bc.NewTx:output_type -> bc.exchange.RpcTransactionResponse
	7,  // 102: bc.exchange.Bc.SendTx:output_type -> bc.exchange.RpcTransactionResponse
	18, // 103: bc.exchange.Bc.GetEmbBalance:output_type -> bc.exchange.GetEmbBalanceResponse
	20, // 104: bc.exchange.Bc.GetBalance:output_type -> bc.exchange.GetBalanceResponse
	65, // 105: bc.exchange.Bc.GetWallet:output_type -> bc.core.WalletData
	65, // 106: bc.exchange.Bc.GetSpendableOutpoints:output_type -> bc.core.WalletData
	16, // 107: bc.exchange.Bc.GetSpendableCollateral:output_type -> bc.exchange.GetSpendableCollateralResponse
	22, // 108: bc.exchange.Bc.GetUnlockTakerTxParams:output_type -> bc.exchange.GetUnlockTakerTxParamsResponse
	19, // 109: bc.exchange.Bc.GetByteFeeMultiplier:output_type -> bc.exchange.GetByteFeeResponse
	11, // 110: bc.exchange.Bc.GetTransfers:output_type -> bc.exchange.TransferResponse
	45, // 111: bc.exchange.Bc.GetTakerForMaker:output_type -> bc.exchange.GetOutPointRequest
	26, // 112: bc.exchange.Bc.GetOpenOrder:output_type -> bc.exchange.GetOpenOrdersResponse
	26, // 113: bc.exchange.Bc.GetOpenCallbackOrder:output_type -> bc.exchange.GetOpenOrdersResponse
	27, // 114: bc.exchange.Bc.GetMatchedOrder:output_type -> bc.exchange.GetMatchedOrdersResponse
	26, // 115: bc.exchange.Bc.GetOpenOrders:output_type -> bc.exchange.GetOpenOrdersResponse
	27, // 116: bc.exchange.Bc.GetMatchedOrders:output_type -> bc.exchange.GetMatchedOrdersResponse
	28, // 117: bc.exchange.Bc.GetHistoricalOrders:output_type -> bc.exchange.GetHistoricalOrdersResponse
	26, // 118: bc.exchange.Bc.GetUnmatchedOrders:output_type -> bc.exchange.GetOpenOrdersResponse
	61, // 119: bc.exchange.Bc.GetOriginalMakerOrder:output_type -> bc.core.Transaction
	66, // 120: bc.exchange.Bc.GetUtxos:output_type -> bc.core.Utxos
	14, // 121: bc.exchange.Bc.GetUTXOLength:output_type -> bc.exchange.GetUtxoLengthResponse
	14, // 122: bc.exchange.Bc.GetSTXOLength:output_type -> bc.exchange.GetUtxoLengthResponse
	47, // 123: bc.exchange.Bc.GetBlocksByRoveredHash:output_type -> bc.exchange.GetBlocksByRoveredHashResponse
	31, // 124: bc.exchange.Bc.GetBlake2bl:output_type -> bc.exchange.GetBlake2blResponse
	33, // 125: bc.exchange.Bc.GetBcAddressViaVanity:output_type -> bc.exchange.VanityConvertResponse
	50, // 126: bc.exchange.Bc.GetCurrentWork:output_type -> bc.exchange.CurrentWork
	51, // 127: bc.exchange.Bc.GetSyncStatus:output_type -> bc.exchange.SyncStatus
	51, // 128: bc.exchange.Bc.GetFastSyncStatus:output_type -> bc.exchange.SyncStatus
	73, // [73:129] is the sub-list for method output_type
	17, // [17:73] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_bc_proto_init() }
func file_bc_proto_init() {
	if File_bc_proto != nil {
		return
	}
	file_core_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bc_proto_rawDesc), len(file_bc_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bc_proto_goTypes,
		DependencyIndexes: file_bc_proto_depIdxs,
		EnumInfos:         file_bc_proto_enumTypes,
		MessageInfos:      file_bc_proto_msgTypes,
	}.Build()
	File_bc_proto = out.File
	file_bc_proto_goTypes = nil
	file_bc_proto_depIdxs = nil
}
