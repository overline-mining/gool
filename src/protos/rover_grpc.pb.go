// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: rover.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rover_Join_FullMethodName                 = "/bc.rover.Rover/Join"
	Rover_CollectBlock_FullMethodName         = "/bc.rover.Rover/CollectBlock"
	Rover_ReportSyncStatus_FullMethodName     = "/bc.rover.Rover/ReportSyncStatus"
	Rover_ReportBlockRange_FullMethodName     = "/bc.rover.Rover/ReportBlockRange"
	Rover_IsBeforeSettleHeight_FullMethodName = "/bc.rover.Rover/IsBeforeSettleHeight"
	Rover_GetQueuedMarkedTxs_FullMethodName   = "/bc.rover.Rover/GetQueuedMarkedTxs"
)

// RoverClient is the client API for Rover service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoverClient interface {
	// Sends a greeting
	Join(ctx context.Context, in *RoverIdent, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RoverMessage], error)
	// Rovers sends block collected from the respective network
	CollectBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Block, Null], error)
	// Rover reports back sync status
	ReportSyncStatus(ctx context.Context, in *RoverSyncStatus, opts ...grpc.CallOption) (*Null, error)
	// Rover submits block range
	ReportBlockRange(ctx context.Context, in *RoverMessage_RoverBlockRange, opts ...grpc.CallOption) (*Null, error)
	// Check is TX reciveved in rover is watched and before settlement height
	IsBeforeSettleHeight(ctx context.Context, in *SettleTxCheckReq, opts ...grpc.CallOption) (*SettleTxCheckResponse, error)
	// check if any marked txs have been queued
	GetQueuedMarkedTxs(ctx context.Context, in *MarkedTxsReq, opts ...grpc.CallOption) (*QueuedMarkedTxsResponse, error)
}

type roverClient struct {
	cc grpc.ClientConnInterface
}

func NewRoverClient(cc grpc.ClientConnInterface) RoverClient {
	return &roverClient{cc}
}

func (c *roverClient) Join(ctx context.Context, in *RoverIdent, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RoverMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rover_ServiceDesc.Streams[0], Rover_Join_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RoverIdent, RoverMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rover_JoinClient = grpc.ServerStreamingClient[RoverMessage]

func (c *roverClient) CollectBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Block, Null], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Rover_ServiceDesc.Streams[1], Rover_CollectBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Block, Null]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rover_CollectBlockClient = grpc.ClientStreamingClient[Block, Null]

func (c *roverClient) ReportSyncStatus(ctx context.Context, in *RoverSyncStatus, opts ...grpc.CallOption) (*Null, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Null)
	err := c.cc.Invoke(ctx, Rover_ReportSyncStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roverClient) ReportBlockRange(ctx context.Context, in *RoverMessage_RoverBlockRange, opts ...grpc.CallOption) (*Null, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Null)
	err := c.cc.Invoke(ctx, Rover_ReportBlockRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roverClient) IsBeforeSettleHeight(ctx context.Context, in *SettleTxCheckReq, opts ...grpc.CallOption) (*SettleTxCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettleTxCheckResponse)
	err := c.cc.Invoke(ctx, Rover_IsBeforeSettleHeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roverClient) GetQueuedMarkedTxs(ctx context.Context, in *MarkedTxsReq, opts ...grpc.CallOption) (*QueuedMarkedTxsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueuedMarkedTxsResponse)
	err := c.cc.Invoke(ctx, Rover_GetQueuedMarkedTxs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoverServer is the server API for Rover service.
// All implementations must embed UnimplementedRoverServer
// for forward compatibility.
type RoverServer interface {
	// Sends a greeting
	Join(*RoverIdent, grpc.ServerStreamingServer[RoverMessage]) error
	// Rovers sends block collected from the respective network
	CollectBlock(grpc.ClientStreamingServer[Block, Null]) error
	// Rover reports back sync status
	ReportSyncStatus(context.Context, *RoverSyncStatus) (*Null, error)
	// Rover submits block range
	ReportBlockRange(context.Context, *RoverMessage_RoverBlockRange) (*Null, error)
	// Check is TX reciveved in rover is watched and before settlement height
	IsBeforeSettleHeight(context.Context, *SettleTxCheckReq) (*SettleTxCheckResponse, error)
	// check if any marked txs have been queued
	GetQueuedMarkedTxs(context.Context, *MarkedTxsReq) (*QueuedMarkedTxsResponse, error)
	mustEmbedUnimplementedRoverServer()
}

// UnimplementedRoverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoverServer struct{}

func (UnimplementedRoverServer) Join(*RoverIdent, grpc.ServerStreamingServer[RoverMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedRoverServer) CollectBlock(grpc.ClientStreamingServer[Block, Null]) error {
	return status.Errorf(codes.Unimplemented, "method CollectBlock not implemented")
}
func (UnimplementedRoverServer) ReportSyncStatus(context.Context, *RoverSyncStatus) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSyncStatus not implemented")
}
func (UnimplementedRoverServer) ReportBlockRange(context.Context, *RoverMessage_RoverBlockRange) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBlockRange not implemented")
}
func (UnimplementedRoverServer) IsBeforeSettleHeight(context.Context, *SettleTxCheckReq) (*SettleTxCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBeforeSettleHeight not implemented")
}
func (UnimplementedRoverServer) GetQueuedMarkedTxs(context.Context, *MarkedTxsReq) (*QueuedMarkedTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueuedMarkedTxs not implemented")
}
func (UnimplementedRoverServer) mustEmbedUnimplementedRoverServer() {}
func (UnimplementedRoverServer) testEmbeddedByValue()               {}

// UnsafeRoverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoverServer will
// result in compilation errors.
type UnsafeRoverServer interface {
	mustEmbedUnimplementedRoverServer()
}

func RegisterRoverServer(s grpc.ServiceRegistrar, srv RoverServer) {
	// If the following call pancis, it indicates UnimplementedRoverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rover_ServiceDesc, srv)
}

func _Rover_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoverIdent)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoverServer).Join(m, &grpc.GenericServerStream[RoverIdent, RoverMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rover_JoinServer = grpc.ServerStreamingServer[RoverMessage]

func _Rover_CollectBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoverServer).CollectBlock(&grpc.GenericServerStream[Block, Null]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Rover_CollectBlockServer = grpc.ClientStreamingServer[Block, Null]

func _Rover_ReportSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoverSyncStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoverServer).ReportSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rover_ReportSyncStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoverServer).ReportSyncStatus(ctx, req.(*RoverSyncStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rover_ReportBlockRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoverMessage_RoverBlockRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoverServer).ReportBlockRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rover_ReportBlockRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoverServer).ReportBlockRange(ctx, req.(*RoverMessage_RoverBlockRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rover_IsBeforeSettleHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleTxCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoverServer).IsBeforeSettleHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rover_IsBeforeSettleHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoverServer).IsBeforeSettleHeight(ctx, req.(*SettleTxCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rover_GetQueuedMarkedTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkedTxsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoverServer).GetQueuedMarkedTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rover_GetQueuedMarkedTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoverServer).GetQueuedMarkedTxs(ctx, req.(*MarkedTxsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Rover_ServiceDesc is the grpc.ServiceDesc for Rover service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rover_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bc.rover.Rover",
	HandlerType: (*RoverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportSyncStatus",
			Handler:    _Rover_ReportSyncStatus_Handler,
		},
		{
			MethodName: "ReportBlockRange",
			Handler:    _Rover_ReportBlockRange_Handler,
		},
		{
			MethodName: "IsBeforeSettleHeight",
			Handler:    _Rover_IsBeforeSettleHeight_Handler,
		},
		{
			MethodName: "GetQueuedMarkedTxs",
			Handler:    _Rover_GetQueuedMarkedTxs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _Rover_Join_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CollectBlock",
			Handler:       _Rover_CollectBlock_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rover.proto",
}
