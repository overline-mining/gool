// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.21.12
// source: oland.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Plot struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Hash       []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	PlotNumber uint64                 `protobuf:"varint,2,opt,name=plot_number,json=plotNumber,proto3" json:"plot_number,omitempty"`
	Version    uint64                 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Blockchain string                 `protobuf:"bytes,4,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	// with ms
	Distance            uint64           `protobuf:"varint,5,opt,name=distance,proto3" json:"distance,omitempty"`   // the influence score of the plot based on impacted txs ini the panels
	Timestamp           uint64           `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // the creation date of the plot or associated with the increment of the nonce
	PlotAttrsCount      uint64           `protobuf:"varint,7,opt,name=plot_attrs_count,json=plotAttrsCount,proto3" json:"plot_attrs_count,omitempty"`
	Nonce               []byte           `protobuf:"bytes,8,opt,name=nonce,proto3" json:"nonce,omitempty"`                             // reference to originating plot overline route or nonce
	MerkleRoot          []byte           `protobuf:"bytes,9,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"` // merkle root of all plot attributes and all repeated fields
	Signature           []byte           `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`                    // generally of the merkle root
	OwnerCount          uint64           `protobuf:"varint,11,opt,name=owner_count,json=ownerCount,proto3" json:"owner_count,omitempty"`
	MarkedTxHashesCount uint64           `protobuf:"varint,12,opt,name=marked_tx_hashes_count,json=markedTxHashesCount,proto3" json:"marked_tx_hashes_count,omitempty"`
	EmbHashesCount      uint64           `protobuf:"varint,13,opt,name=emb_hashes_count,json=embHashesCount,proto3" json:"emb_hashes_count,omitempty"`
	Owners              [][]byte         `protobuf:"bytes,14,rep,name=owners,proto3" json:"owners,omitempty"`                                            // hashes of payout address
	MarkedTxsHashes     [][]byte         `protobuf:"bytes,15,rep,name=marked_txs_hashes,json=markedTxsHashes,proto3" json:"marked_txs_hashes,omitempty"` // hashes of transactions that are marked as part of the plot and associated to the blockchain
	EmbHashes           [][]byte         `protobuf:"bytes,16,rep,name=emb_hashes,json=embHashes,proto3" json:"emb_hashes,omitempty"`                     // transaction hashes of emb boosts or OL feed transactions
	Attributes          []*PlotAttribute `protobuf:"bytes,17,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Panels              []*PlotPanel     `protobuf:"bytes,18,rep,name=panels,proto3" json:"panels,omitempty"` // routing tables for transactions
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Plot) Reset() {
	*x = Plot{}
	mi := &file_oland_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plot) ProtoMessage() {}

func (x *Plot) ProtoReflect() protoreflect.Message {
	mi := &file_oland_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plot.ProtoReflect.Descriptor instead.
func (*Plot) Descriptor() ([]byte, []int) {
	return file_oland_proto_rawDescGZIP(), []int{0}
}

func (x *Plot) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Plot) GetPlotNumber() uint64 {
	if x != nil {
		return x.PlotNumber
	}
	return 0
}

func (x *Plot) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Plot) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *Plot) GetDistance() uint64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *Plot) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Plot) GetPlotAttrsCount() uint64 {
	if x != nil {
		return x.PlotAttrsCount
	}
	return 0
}

func (x *Plot) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Plot) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *Plot) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Plot) GetOwnerCount() uint64 {
	if x != nil {
		return x.OwnerCount
	}
	return 0
}

func (x *Plot) GetMarkedTxHashesCount() uint64 {
	if x != nil {
		return x.MarkedTxHashesCount
	}
	return 0
}

func (x *Plot) GetEmbHashesCount() uint64 {
	if x != nil {
		return x.EmbHashesCount
	}
	return 0
}

func (x *Plot) GetOwners() [][]byte {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *Plot) GetMarkedTxsHashes() [][]byte {
	if x != nil {
		return x.MarkedTxsHashes
	}
	return nil
}

func (x *Plot) GetEmbHashes() [][]byte {
	if x != nil {
		return x.EmbHashes
	}
	return nil
}

func (x *Plot) GetAttributes() []*PlotAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Plot) GetPanels() []*PlotPanel {
	if x != nil {
		return x.Panels
	}
	return nil
}

type PlotAttribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type          []byte                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlotAttribute) Reset() {
	*x = PlotAttribute{}
	mi := &file_oland_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlotAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlotAttribute) ProtoMessage() {}

func (x *PlotAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_oland_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlotAttribute.ProtoReflect.Descriptor instead.
func (*PlotAttribute) Descriptor() ([]byte, []int) {
	return file_oland_proto_rawDescGZIP(), []int{1}
}

func (x *PlotAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlotAttribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PlotAttribute) GetType() []byte {
	if x != nil {
		return x.Type
	}
	return nil
}

type PlotPanel struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Hash             []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousHash     []byte                 `protobuf:"bytes,2,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	Version          uint64                 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ShardHash        []byte                 `protobuf:"bytes,4,opt,name=shard_hash,json=shardHash,proto3" json:"shard_hash,omitempty"`
	ShardNonce       []byte                 `protobuf:"bytes,5,opt,name=shard_nonce,json=shardNonce,proto3" json:"shard_nonce,omitempty"`                   /// the public r of the rollup or schnorr
	PartialProof     []byte                 `protobuf:"bytes,6,opt,name=partial_proof,json=partialProof,proto3" json:"partial_proof,omitempty"`             // proof of the shard hash
	PartialSignature []byte                 `protobuf:"bytes,7,opt,name=partial_signature,json=partialSignature,proto3" json:"partial_signature,omitempty"` // additional proof
	TxCount          uint64                 `protobuf:"varint,8,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	Txs              [][]byte               `protobuf:"bytes,9,rep,name=txs,proto3" json:"txs,omitempty"` // ol hashes compressed through schnorr based on the shard hash
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PlotPanel) Reset() {
	*x = PlotPanel{}
	mi := &file_oland_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlotPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlotPanel) ProtoMessage() {}

func (x *PlotPanel) ProtoReflect() protoreflect.Message {
	mi := &file_oland_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlotPanel.ProtoReflect.Descriptor instead.
func (*PlotPanel) Descriptor() ([]byte, []int) {
	return file_oland_proto_rawDescGZIP(), []int{2}
}

func (x *PlotPanel) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *PlotPanel) GetPreviousHash() []byte {
	if x != nil {
		return x.PreviousHash
	}
	return nil
}

func (x *PlotPanel) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PlotPanel) GetShardHash() []byte {
	if x != nil {
		return x.ShardHash
	}
	return nil
}

func (x *PlotPanel) GetShardNonce() []byte {
	if x != nil {
		return x.ShardNonce
	}
	return nil
}

func (x *PlotPanel) GetPartialProof() []byte {
	if x != nil {
		return x.PartialProof
	}
	return nil
}

func (x *PlotPanel) GetPartialSignature() []byte {
	if x != nil {
		return x.PartialSignature
	}
	return nil
}

func (x *PlotPanel) GetTxCount() uint64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *PlotPanel) GetTxs() [][]byte {
	if x != nil {
		return x.Txs
	}
	return nil
}

var File_oland_proto protoreflect.FileDescriptor

var file_oland_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62,
	0x63, 0x2e, 0x6f, 0x6c, 0x61, 0x6e, 0x64, 0x22, 0xf7, 0x04, 0x0a, 0x04, 0x50, 0x6c, 0x6f, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6c, 0x6f, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x6f,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x6c, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x6d, 0x62, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x6d, 0x62, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x54, 0x78, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6d, 0x62, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x09, 0x65, 0x6d, 0x62, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x63, 0x2e, 0x6f, 0x6c, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x6c, 0x6f, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x63, 0x2e, 0x6f, 0x6c, 0x61, 0x6e, 0x64, 0x2e,
	0x50, 0x6c, 0x6f, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x50, 0x6c, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x9d, 0x02, 0x0a, 0x09, 0x50, 0x6c, 0x6f, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x78, 0x73,
	0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_oland_proto_rawDescOnce sync.Once
	file_oland_proto_rawDescData = file_oland_proto_rawDesc
)

func file_oland_proto_rawDescGZIP() []byte {
	file_oland_proto_rawDescOnce.Do(func() {
		file_oland_proto_rawDescData = protoimpl.X.CompressGZIP(file_oland_proto_rawDescData)
	})
	return file_oland_proto_rawDescData
}

var file_oland_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_oland_proto_goTypes = []any{
	(*Plot)(nil),          // 0: bc.oland.Plot
	(*PlotAttribute)(nil), // 1: bc.oland.PlotAttribute
	(*PlotPanel)(nil),     // 2: bc.oland.PlotPanel
}
var file_oland_proto_depIdxs = []int32{
	1, // 0: bc.oland.Plot.attributes:type_name -> bc.oland.PlotAttribute
	2, // 1: bc.oland.Plot.panels:type_name -> bc.oland.PlotPanel
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_oland_proto_init() }
func file_oland_proto_init() {
	if File_oland_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oland_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_oland_proto_goTypes,
		DependencyIndexes: file_oland_proto_depIdxs,
		MessageInfos:      file_oland_proto_msgTypes,
	}.Build()
	File_oland_proto = out.File
	file_oland_proto_rawDesc = nil
	file_oland_proto_goTypes = nil
	file_oland_proto_depIdxs = nil
}
